import {
  getBiggest,
  getCorrects,
  getLastCallback,
  getQuestion,
  resetProgress,
  updateResult,
} from "../_shared/supabase/progress.ts";
import { createUser, getUid, setLanguage, getLanguage, checkAndReturnUser } from "../_shared/supabase/users.ts";
import { pathIncrement } from "../path-increment.ts";""

import { checkSubscription } from "../check-subscription.ts";
import {
  handleUpdateJavaScript,
  javaScriptDevBot,
} from "../_shared/telegram/bots.ts";
import { HttpError } from "https://deno.land/x/grammy@v1.22.4/mod.ts";
import { GrammyError } from "https://deno.land/x/grammy@v1.22.4/core/error.ts";

import { getAiFeedbackFromSupabase } from "../_shared/supabase/ai.ts";
import { Context } from "https://deno.land/x/grammy@v1.8.3/mod.ts";

const videoUrl = "https://t.me/dao999nft_storage/5";

javaScriptDevBot.command("start", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const isRu = await getLanguage(ctx.from?.id.toString()) === "russian";
  if (!ctx.from) return;
  const user = await createUser({
    username: ctx.from?.username || "",
    first_name: ctx.from?.first_name || "",
    last_name: ctx.from?.last_name || "",
    is_bot: ctx.from?.is_bot || false,
    language_code: ctx.from?.language_code || "",
    chat_id: ctx.chat.id,
    telegram_id: ctx.from?.id || 0,
    inviter: "",
  });
  console.log(user, "createUser")
  const isSubscription = await checkSubscription(
    ctx,
    ctx.from?.id || 0,
    "-1002228291515",
  );
  console.log(isSubscription, "isSubscription")

  if (isSubscription === true) {
    await ctx.reply(
      isRu
        ? `üöÄ –ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}! \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è JavaScript —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞! –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–∏—Ç—å –æ—Å–Ω–æ–≤—ã JavaScript, –Ω–æ –∏ –∏–∑—É—á–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –æ–±—â–µ–Ω–∏–µ.\n\nüñ•Ô∏è –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –æ–±–∑–æ—Ä —Ç–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ö–æ–¥—É —Ç–≤–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –ù–∞—à–µ –æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º.\n\nüí° –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä JavaScript? \n–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç(–∫–Ω–æ–ø–∫–∞)`
        : `üöÄ Hi, ${ctx.from?.first_name}! \nWelcome to your personal assistant to learn JavaScript programming language with artificial intelligence! Here you can not only learn the basics of JavaScript, but also explore more advanced topics through interactive learning and communication.\n\nüñ•Ô∏è I'm here to offer you an overview of entry-level topics, help you solve problems and take tests, and answer any questions as you learn. Our communication will be based on the latest advances in artificial intelligence, making your learning experience even more effective and fun.\n\n\nüí° Ready to start your exciting journey into the world of JavaScript? \nStart Test(button)`,
      // ctx.t("startJavaScript"),
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: isRu ? "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!" : "Start Test!", callback_data: "start_test" }],
          ],
        },
      },
    );
  } else if (isSubscription === false) {
    // const messageText = isRu
    //   ? `<b>–ö—É—Ä—Å –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—èü§ñ BotMother</b>\n–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤. –í—ã –∏–∑—É—á–∏—Ç–µ JavaScript, Python, TypeScript, React & React Native, –¢–∞—Åt, GraphQL, Apollo –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º TON –∏ Telegram Mini App`
    //   : `<b>Automation Courseü§ñ BotMother</b>\nProgramming under the guidance of neural assistants. You will learn JavaScript, Python, TypeScript, React & React Native, TAST, GraphQL, Apollo and integration with the TON blockchain and Telegram Mini App`;
    // await ctx.replyWithPhoto(
    //   isRu
    //     ? "https://subscribebot.org/api/v1/snippet/subscription/19957?cache_key=OTk5OTAwX9Ca0YPRgNGBINCQ0LLRgtC+0LzQsNGC0LjQt9Cw0YbQuNGP8J+kliBCb3RNb3RoZXJf0J/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40LUg0L/QvtC0INGA0YPQutC+0LLQvtC00YHRgtCy0L7QvCDQvdC10LnRgNC+0L3QvdGL0YUg0L/QvtC80L7RidC90LjQutC+0LIuINCS0Ysg0LjQt9GD0YfQuNGC0LUgSmF2YVNjcmlwdCwgUHl0aG9uLCBUeXBlU2NyaXB0LCBSZWFjdCAmIFJlYWN0IE5hdGl2ZSwg0KLQsNGBdCwgR3JhcGhRTCwgQXBvbGxvINC4INC40L3RgtC10LPRgNCw0YbQuNGOINGBINCx0LvQvtC60YfQtdC50L3QvtC8IFRPTiDQuCBUZWxlZ3JhbSBNaW5pIEFwcF8xNzE0NzE1NDA4"
    //     : "https://subscribebot.org/api/v1/snippet/subscription/25500?cache_key=OTkwMF9BdXRvbWF0aW9uIGNvdXJzZfCfpJYgQm90TW90aGVyX1dlIGludml0ZSB5b3UgdG8gZGl2ZSBpbnRvIHByb2dyYW1taW5nIHVuZGVyIHRoZSBndWlkYW5jZSBvZiBuZXVyYWwgYXNzaXN0YW50cy4gWW91IHdpbGwgbGVhcm4gSmF2YVNjcmlwdCwgUHl0aG9uLCBUeXBlU2NyaXB0LCBSZWFjdCAmIFJlYWN0IE5hdGl2ZSwgVGHRgXQsIEdyYXBoUUwsIEFwb2xsbyBhbmQgaW50ZWdyYXRpb24gd2l0aCB0aGUgVE9OIGJsb2NrY2hhaW4gYW5kIFRlbGVncmFtIE1pbmkgQXBwXzE3MTQ3MTUzNjQ=",
    //   {
    //     caption: messageText,
    //     parse_mode: "HTML",
    //     reply_markup: {
    //       inline_keyboard: [
    //         [{
    //           text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
    //           url: isRu
    //             ? "https://t.me/tribute/app?startapp=s5bT"
    //             : "https://t.me/tribute/app?startapp=s6Di",
    //         }],
    //       ],
    //     },
    //   },
    // );
    console.log("isSubscription false !!")
    const messageText = isRu
    ? `–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ –±–æ—Ç–∞–º–∏, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –≤ Telegram.`
    : `To use our bots, you must subscribe to our Telegram group.`;
    await ctx.replyWithVideo(videoUrl, {
      caption: messageText,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: isRu ? "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" : "Subscribe", url: "https://t.me/ai_koshey999nft" }],
        ],
      },
    });
  }
});

javaScriptDevBot.command("language", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const { user } = await checkAndReturnUser(ctx.from?.id.toString());
  const isRu = await getLanguage(ctx.from?.id.toString()) === "russian";
  user && ctx.reply(isRu ? "üåè –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫" : "üåè Select language", {
    reply_markup: {
      inline_keyboard: [
        [{ text: isRu ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá∑üá∫ Russian", callback_data: "select_russian" }],
        [{ text: isRu ? "üá¨üáß English" : "üá¨üáß English", callback_data: "select_english" }],
      ],
    },
  })
});

const botLinks = async (ctx: Context, isRu: boolean) => {
  await ctx.reply(
    isRu
      ? "–ù–∞—à–∏ –±–æ—Ç—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, JavaScript, TypeScript, React, Python, Tact, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Ç–æ–∫–µ–Ω –∑–Ω–∞–Ω–∏–π $IGLA.\n–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–∫–µ—Ä–æ–≤, –Ω–∞—à–∏ –±–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π, –æ–±—É—á–∞—è—Å—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞"
      : "Our AI training bots, JavaScript, TypeScript, React, Python, Tact, provide a unique opportunity to earn our $IGLA knowledge token for free.\nUnlike other clickers, our bots allow users to spend time profitably learning in-demand skills who can significantly increase your professional value on the labor market",
    {
      reply_markup: {
        inline_keyboard: [[
          // { text: "Automatization", url: "https://t.me/bot1" },
          { text: "TypeScript", url: "https://t.me/typescript_dev_bot" },
          { text: "Python", url: "https://t.me/python_ai_dev_bot" },
        ], [{ text: "React", url: "https://t.me/react_native_dev_bot" }, {
          text: "JavaScript",
          url: "https://t.me/javascriptcamp_bot",
        } // { text: "Tact", url: "https://t.me/bot6" },
        ]],
      },
    },
  );
  return;
};

javaScriptDevBot.command("bots", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const isRu = await getLanguage(ctx.from?.id.toString()) === "russian";
  await botLinks(ctx, isRu);
  return;
});

javaScriptDevBot.on("message:text", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  console.log(ctx);
  const query = ctx.message.text;

  try {
    const feedback = await getAiFeedbackFromSupabase({
      id_array: [],
      username: ctx.from?.username || "",
      language_code: ctx.from?.language_code || "",
      query,
    });
    await ctx.reply(feedback.ai_content, { parse_mode: "Markdown" });
    return;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:", error);
    throw error;
  }
});

javaScriptDevBot.on("callback_query:data", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  console.log(ctx);
  const callbackData = ctx.callbackQuery.data;
  const isHaveAnswer = callbackData.split("_").length === 4;
  if (!ctx.from) throw new Error("User not found");
  const isRu = await getLanguage(ctx.from?.id.toString()) === "russian";

  await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } });

  if (callbackData === "select_russian") {
    await setLanguage(ctx.from?.id.toString(), "russian");
    await ctx.reply(isRu ? "–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π" : "Russian selected");
  }
  if (callbackData === "select_english") {
    await setLanguage(ctx.from?.id.toString(), "english");
    await ctx.reply(isRu ? "–í—ã–±—Ä–∞–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" : "English selected");
  }
  if (callbackData === "start_test") {
    try {
      await resetProgress({
        username: ctx.callbackQuery.from.username || "",
        language: "javascript",
      });
      const questionContext = {
        lesson_number: 1,
        subtopic: 1,
      };

      const questions = await getQuestion({
        ctx: questionContext,
        language: "javascript",
      });
      if (questions.length > 0) {
        const {
          topic: ruTopic,
          image_lesson_url,
          topic_en: enTopic,
        } = questions[0];

        const user_id = await getUid(ctx.callbackQuery.from.username || "");
        if (!user_id) {
          await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }
        const topic = isRu ? ruTopic : enTopic;
        const allAnswers = await getCorrects({
          user_id: user_id.toString(),
          language: "all",
        });
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `${topic}\n\n<i><u>–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.</u></i>\n\n<b>Total: ${allAnswers} $IGLA</b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É",
            callback_data: `javascript_01_01`,
          }],
        ];

        if (image_lesson_url) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.replyWithPhoto(image_lesson_url || "", {
            caption: messageText,
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: inlineKeyboard },
          });
          return;
        } else {
          await ctx.reply(messageText, {
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: inlineKeyboard },
          });
          return;
        }
      } else {
        await ctx.reply("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      }
    } catch (error) {
      console.error(error);
    }
  }

  if (!isHaveAnswer) {
    try {
      const [language, lesson, subtopic] = callbackData.split("_");
      let questions;
      if (!isNaN(Number(lesson)) && !isNaN(Number(subtopic))) {
        // –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.
        const getQuestionContext = {
          lesson_number: Number(lesson),
          subtopic: Number(subtopic),
        };
        questions = await getQuestion({
          ctx: getQuestionContext,
          language,
        });
      } else {
        // –û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
        console.error(
          "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(96):",
          lesson,
          subtopic,
          callbackData,
        );
        await ctx.reply(
          isRu
            ? "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ."
            : "One of the values is incorrect. Please check the data.",
        );
        return;
      }
      const {
        question: ruQuestion,
        variant_0: ruVariant_0,
        variant_1: ruVariant_1,
        variant_2: ruVariant_2,
        question_en: enQuestion,
        variant_0: enVariant_0,
        variant_1: enVariant_1,
        variant_2: enVariant_2,
        id,
        image_lesson_url,
      } = questions[0];

      const question = isRu ? ruQuestion : enQuestion;
      const variant_0 = isRu ? ruVariant_0 : enVariant_0;
      const variant_1 = isRu ? ruVariant_1 : enVariant_1;
      const variant_2 = isRu ? ruVariant_2 : enVariant_2;

      const user_id = await getUid(ctx.callbackQuery.from.username || "");
      if (!user_id) {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      console.log(user_id);
      const allAnswers = await getCorrects({
        user_id: user_id.toString(),
        language: "all",
      });
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageText =
        `<b>–í–æ–ø—Ä–æ—Å ‚Ññ${id}</b>\n\n${question}\n\n<b> Total: ${allAnswers} $IGLA</b>`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
      const inlineKeyboard = [
        [{
          text: variant_0 || "–í–∞—Ä–∏–∞–Ω—Ç 1",
          callback_data: `${callbackData}_0`,
        }],
        [{
          text: variant_1 || "–í–∞—Ä–∏–∞–Ω—Ç 2",
          callback_data: `${callbackData}_1`,
        }],
        [{
          text: variant_2 || "–ù–µ –∑–Ω–∞—é",
          callback_data: `${callbackData}_2`,
        }],
      ];

      if (image_lesson_url) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.editMessageCaption({
          reply_markup: { inline_keyboard: inlineKeyboard },
          caption: messageText,
          parse_mode: "HTML",
        });
      } else {
        await ctx.editMessageText(messageText, {
          reply_markup: { inline_keyboard: inlineKeyboard },
          parse_mode: "HTML",
        });
      }
    } catch (error) {
      console.error(error);
    }
  }

  if (isHaveAnswer) {
    try {
      const [language, lesson_number, subtopic, answer] = callbackData.split(
        "_",
      );
      const questionContext = {
        lesson_number: Number(lesson_number),
        subtopic: Number(subtopic),
      };

      const questions = await getQuestion({ ctx: questionContext, language });
      if (questions.length > 0) {
        const {
          correct_option_id,
        } = questions[0];

        const user_id = await getUid(ctx.callbackQuery.from.username || "");
        if (!user_id) {
          await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }

        const path = `${language}_${lesson_number}_${subtopic}`;
        const biggestSubtopic = await getBiggest({
          lesson_number: Number(lesson_number),
          language,
        });

        let isTrueAnswer = null;
        if (Number(correct_option_id) === Number(answer)) {
          isTrueAnswer = true;
          await ctx.reply("‚úÖ");
        } else {
          isTrueAnswer = false;
          await ctx.reply("‚ùå");
        }
        const newPath = await pathIncrement({
          path,
          isSubtopic: Number(biggestSubtopic) === Number(subtopic) ? false : true,
        });
        const correctAnswers = await getCorrects({
          user_id: user_id.toString(),
          language,
        });
        const allAnswers = await getCorrects({
          user_id: user_id.toString(),
          language: "all",
        });

        const lastCallbackId = await getLastCallback(language);
        console.log(lastCallbackId);
        if (lastCallbackId) {
          if (questions[0].id === lastCallbackId) {
            const correctProcent = (correctAnswers / lastCallbackId) * 100;
            if (correctProcent >= 80) {
              await updateResult({
                user_id: user_id.toString(),
                language,
                value: true,
              });
              await ctx.reply(
                isRu
                  ? `<b>ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç! –î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Ç –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.</b>\n\n Total: ${allAnswers} $IGLA`
                  : `<b>ü•≥ Congratulations, you passed the main test! Then you can pass the additional tests from the artificial intelligence.</b>\n\n Total: ${allAnswers} $IGLA`,
                { parse_mode: "HTML" },
              );
            } else {
              await updateResult({
                user_id: user_id.toString(),
                language,
                value: false,
              });
              await ctx.reply(
                isRu
                  ? `<b>ü•≤ –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! </b>\n\n Total: ${allAnswers} $IGLA`
                  : `<b>ü•≤ You didn't pass the main test, but that won't stop you from developing!</b>\n\n Total: ${allAnswers} $IGLA`,
                { parse_mode: "HTML" },
              );
            }
          }
          const [newLanguage, newLesson, newSubtopic] = newPath.split("_");
          const getQuestionContext = {
            lesson_number: Number(newLesson),
            subtopic: Number(newSubtopic),
          };
          const newQuestions = await getQuestion({
            ctx: getQuestionContext,
            language,
          });
          const { topic: ruTopic, image_lesson_url, topic_en: enTopic } =
            newQuestions[0];
          const topic = isRu ? ruTopic : enTopic;
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          const messageText =
            `${topic}\n\n<i><u>–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.</u></i>\n\n<b> Total: ${allAnswers} $IGLA</b>`;

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
          const inlineKeyboard = [
            [{
              text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É",
              callback_data: newPath,
            }],
          ];
          if (image_lesson_url) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.replyWithPhoto(image_lesson_url, {
              caption: messageText,
              parse_mode: "HTML",
              reply_markup: { inline_keyboard: inlineKeyboard },
            });
            return;
          } else {
            await ctx.reply(messageText, {
              parse_mode: "HTML",
              reply_markup: { inline_keyboard: inlineKeyboard },
            });
            return;
          }
        } else {
          await ctx.reply(isRu ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
        }
      } else {
        console.error("Invalid callback(289)");
        return;
      }
    } catch (error) {
      console.error(error);
    }
  }
});

javaScriptDevBot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    if (e.description.includes("bot was blocked by the user")) {
      throw new Error(`Bot was blocked by the user ${ctx.from?.username}`);
    } else {
      throw new Error(e.description);
    }
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

Deno.serve(async (req) => {
  try {
    const url = new URL(req.url);
    if (url.searchParams.get("secret") !== Deno.env.get("FUNCTION_SECRET")) {
      return new Response("not allowed", { status: 405 });
    }
    const { content, tasks, data } = await handleUpdateJavaScript(req);
    return new Response(JSON.stringify({ content, tasks, data }), {
      status: 200,
    });
  } catch (err) {
    console.error(err);
  }
  return new Response("Endpoint not found", { status: 404 });
});
