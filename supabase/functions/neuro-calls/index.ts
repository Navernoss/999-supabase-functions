// Setup type definitions for built-in Supabase Runtime APIs
/// <reference types="https://esm.sh/@supabase/functions-js/src/edge-runtime.d.ts" />

import {
	Context,
	GrammyError,
	HttpError,
} from "https://deno.land/x/grammy@v1.8.3/mod.ts";

import { checkSubscription } from "../check-subscription.ts";
import { NEURO_CALLS, delay } from "../_shared/constants.ts";
import { createUser } from "../_shared/nextapi/index.ts";
import {
	botNeuroCalls,
	botUsernameNeuroCalls,
	bugCatcherRequest,
	handleUpdateNeuroCalls,
} from "../_shared/telegram/bots.ts";
import { answerAi } from "../_shared/openai/answerAi.ts"
import {
	checkAndReturnUser,
	checkUsernameCodes,
	getLanguage,
	getUid,
	getUsernameByTelegramId,
	setLanguage,
	setSelectedIzbushka,
	updateUser,
	setModel,
	getModel,
	setMode,
	getMode,
	checkAndUpdate
} from "../_shared/supabase/users.ts";
import {
	getRooms,
	getRoomsCopperPipes,
	getRoomsWater,
	getSelectIzbushkaId,
} from "../_shared/supabase/rooms.ts";
import {
	checkPassportByRoomId,
	getPassportsTasksByUsername,
	setPassport,
} from "../_shared/supabase/passport.ts";
import { PassportUser, RoomNode } from "../_shared/types/index.ts";
import {
	createSpeech,
	createVoiceSyncLabs,
	getAiFeedbackFromSupabase,
	getVoiceId,
  isVoiceId,
} from "../_shared/supabase/ai.ts";
import { createVideo } from "../_shared/heygen/index.ts";
import { getTop10Users } from "../_shared/supabase/progress.ts";
import { sendPaymentInfo } from "../_shared/supabase/payments.ts";

export type CreateUserT = {
	id: number;
	username: string;
	first_name: string;
	last_name: string;
	is_bot: boolean;
	language_code: string;
	chat_id: number;
	inviter: string;
	invitation_codes?: string;
	telegram_id: number;
	select_izbushka: string;
};
const isRu = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const language = await getLanguage(ctx.from?.id.toString());
	if (!language) return ctx.from.language_code === "ru"
	return language === "ru";
}

const videoUrl = (isRu: boolean) => isRu ? "https://t.me/dao999nft_storage/8" : "https://t.me/dao999nft_storage/10";
const chatIdSubscription = (lang: boolean) => lang ? "-1002228291515" : "-1002213213628"

const startIzbushka = async (ctx: Context) => {
	const lang = await isRu(ctx)
	try {
		if (!ctx.from) throw new Error("User not found");
		// const text = isRu
		//   ? `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "Izbushka", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.`
		//   : `üè∞ The hut turned its front to you, and its back to the forest. Tap the "Izbushka" button to start the encounter.`;

		const buttons = [
			{
				text: `${lang ? "–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É" : "Enter the room"}`,
				web_app: { url: "https://dao999nft.com/show-izbushka" },
			},
		];

		const text = lang
			? `ü§ù –ù–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å —Ç–µ–º, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å`
			: `ü§ù Start the meeting with the person who invited you`;

		await ctx.reply(
			text,
			{
				reply_markup: {
					inline_keyboard: [buttons],
				},
			},
		);
		return;
	} catch (error) {
		await ctx.reply(lang ? "–°—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞" : "Invalid link")
		throw new Error("startIzbushka", error);
	}
};

const textError = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	return `üîí ${
		lang
			? "–û—Ö, —É–≤—ã –∏ –∞—Ö! –ü—Ä–æ—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –Ω–∞–∑–≤–∞–ª–∏, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
			: "Oh, my apologies! The passphrase you called was incorrect."
	}`;
};

const welcomeMenu = async (ctx: Context) => {
	console.log("‚úÖwelcomeMenu");
	await ctx.replyWithChatAction("upload_video"); // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const text = lang
		? `üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuroCalls, ${ctx.from?.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n\nüöÄ /start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å NeuroCalls\nüåê /language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\nüÜî /soul - –ù–∞–ø–æ–ª–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∞ –¥—É—à–æ–π\nüì≥ /mode - –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò\nüß† /model - –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∞–≤–∞—Ç–∞—Ä–∞\nüîä /text_to_speech - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å\nüîä /reset_voice - –°–±—Ä–æ—Å–∏—Ç—å –≥–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞\nüé§ /voice - –î–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞\nüõí /buy - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\nüÜî /getchatid - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞`
		: `üè∞ Welcome to NeuroCalls, ${ctx.from?.first_name}!\n\nChoose one of the available commands to get started:\n\nüöÄ /start - Start chatting with NeuroCalls\nüåê /language - Select language\nüÜî /soul - Fill your avatar's soul\nüì≥ /mode - Select AI communication mode\nüß† /model - Add avatar's model\nüîä /text_to_speech - Convert text to speech\nüîä /reset_voice - Reset avatar's voice\nüé§ /voice - Add avatar's voice\nüõí /buy - Buy subscription\nüÜî /getchatid - Get chat ID`;

	await ctx.replyWithVideo(videoUrl(lang), {
		caption: text,
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: `${lang ? "üöÄ –ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã" : "üöÄ My rooms"}`,
						callback_data: "neurostart",
					},
					{
						text: `${lang ? "üè¢ –í –≥–æ—Å—Ç—è—Ö" : "üè¢ On a visit"}`,
						callback_data: "neurobasic",
					},
					{
						text: `${lang ? "üíº –û–±—É—á–µ–Ω–∏–µ" : "üíº Learning"}`,
						callback_data: "neurooffice",
					},
				],
			],
		},
	});

	return;
};

const welcomeMessage = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const text = lang
	? `üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuroCalls, ${ctx.from?.first_name}!\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –ø—Ä–æ—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ.`
	: `üè∞ Welcome to NeuroCalls, ${ctx.from?.first_name}!\n\nTo start using the bot, you need to call the passphrase.`;

	await ctx.replyWithVideo(videoUrl(lang), {
		caption: text,
		reply_markup: {
			force_reply: true,
		},
	});
	return;
};

const intro = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const intro = lang
	? `üè∞ –í—ã –Ω–∞–∑–≤–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuroCalls, ${ctx.from?.first_name}!\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.`
	: `üè∞ You have named the correct passphrase. Welcome to NeuroCalls, ${ctx.from?.first_name}!\n\n To start using the bot, you need to select one of the available commands or use the buttons below.`

	return intro;
};

const menuButton = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const menuButton = [
		[
			{
				text: `${lang ? "üöÄ –ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç" : "üöÄ NeuroStart"}`,
				callback_data: "neurostart",
			},
			{
				text: `${lang ? "üè¢ –ù–µ–π—Ä–æ–ë–∞–∑–∞" : "üè¢ NeuroBasic"}`,
				callback_data: "neurobasic",
			},
			{
				text: `${lang ? "üíº –ù–µ–π—Ä–æ–û—Ñ–∏—Å" : "üíº NeuroOffice"}`,
				callback_data: "neurooffice",
			},
 
		],
	];
	return menuButton;
};

// botNeuroCalls.command("post", async (ctx) => {
// 	await checkAndUpdate(ctx)
// 	if (!ctx.from) throw new Error("User not found");
// 	const lang = await isRu(ctx)
// 	const chatId = "-1002228291515";
// 	const message =
// 		`<b>–ê–π –ö–æ—â–µ–π ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–µ–π—Ä–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n–†–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ <b>Telegram</b>,  –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π <b>TON (The Open Network)</b> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n\n–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è <b>"–ë–æ—Ä—Ç–æ–≤–æ–π –∂—É—Ä–Ω–∞–ª"</b> ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. \n\n–ù–∞—à–µ –≤–∏–¥–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–µ—á–∏, –Ω–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º.`;
// 	const message_two =
// 		`üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω–∞—à–∏—Ö —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø–æ –æ–±—É—á–µ–Ω–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, <b>JavaScript, TypeScript, React, Python –∏ Tact! ü§ñüí°</b>\n\nüîç –ù–∞—à–∏ –±–æ—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Ç–æ–∫–µ–Ω –∑–Ω–∞–Ω–∏–π $IGLA, –ø–æ–≥—Ä—É–∂–∞—è—Å—å –≤ –º–∏—Ä –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —É–≥–ª—É–±–ª—è—è—Å—å –≤ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏. üöÄ\n\nüíº –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–∫–µ—Ä–æ–≤, –Ω–∞—à–∏ –±–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π, –æ–±—É—á–∞—è—Å—å –Ω–∞–≤—ã–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å—è—Ç –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞.\n\nüìö –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏, —Å—Ç–∞–Ω–æ–≤—è—Å—å –±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤ —Å—Ñ–µ—Ä–µ IT!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ <b>–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b>!`;
// 	const telegram_id = ctx.from?.id;
// 	if (!telegram_id) throw new Error("No telegram id");
// 	const chatMember = await botNeuroCalls.api.getChatMember(chatId, telegram_id);
// 	const isAdmin = chatMember.status === "administrator" ||
// 		chatMember.status === "creator";
// 	if (!isAdmin) {
// 		await ctx.reply(
// 			lang
// 				? "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
// 				: "You do not have admin rights to perform this action.",
// 		);
// 		return;
// 	}

// 	try {
// 		await botNeuroCalls.api.sendVideo(chatId, videoUrl(lang), {
// 			caption: message,
// 			parse_mode: "HTML",
// 		});
// 		await ctx.reply(
// 			lang
// 				? "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª."
// 				: "Message with video sent to the channel.",
// 		);
// 	} catch (error) {
// 		console.error("Failed to send message with video to the channel:", error);
// 		await ctx.reply(
// 			lang
// 				? "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª."
// 				: "Failed to send message with video to the channel.",
// 		);
// 	}
// });

botNeuroCalls.command("avatar", async (ctx) => {
	if (!ctx.from) throw new Error("User not found");
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	const lang = await isRu(ctx)
	await ctx.reply(
		`${lang ? "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç" : "Send text"}`,
		{
			reply_markup: {
				force_reply: true,
			},
		},
	);
	return;
});

botNeuroCalls.command("getchatid", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const chat_id = ctx.message?.chat?.id;
	await ctx.reply(lang ? `üÜî –¢–µ–∫—É—â–∏–π ID —á–∞—Ç–∞: ${chat_id}` : `üÜî Current chatID: ${chat_id}`);
	return
});

botNeuroCalls.command("soul", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	console.log("soul");
	await ctx.reply(lang ? "–ß—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥—É—à–æ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ" : "To fill your avatar's soul, click the button below", {
		reply_markup: {
			inline_keyboard: [[{
				text: lang ? "–°–æ–∑–¥–∞—Ç—å –¥—É—à—É" : "Create soul",
				callback_data: "create_soul",
			}]],
		},
	});
	return;
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start"
botNeuroCalls.command("start", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	const lang = await isRu(ctx);

	const params = ctx?.message?.text && ctx?.message?.text.split(" ")[1];

	const message = ctx.update.message;
	const username = message?.from?.username;
	const telegram_id = message?.from?.id.toString();
	const language_code = message?.from?.language_code;
	if (!ctx.from) throw new Error("User not found");
	console.log(await isRu(ctx), "isRu")

	if(!ctx.from.username) {
		await ctx.reply(lang ? "üîç –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å username" : "üîç To use the bot, you must have a username")
		return
	}

	if (params) {
		const underscoreIndex = params.indexOf("_"); // Search for the index of the first '_'

		if (underscoreIndex !== -1) {
			const select_izbushka = params.substring(0, underscoreIndex); // Extract the part before '_'
			const inviter = await getUsernameByTelegramId(params.substring(underscoreIndex + 1));
			if (!inviter) {
				await ctx.reply(lang ? "–°—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞" : "Invalid link")
				return
			}

			// Check if the selected hut and inviter exist
			if (select_izbushka && inviter) {
				try {
					// Check if the inviter exists
					const { isInviterExist, inviter_user_id, invitation_codes } =
						await checkUsernameCodes(inviter);

					console.log(isInviterExist, "373 isInviterExist")
					if (isInviterExist && invitation_codes) {
						const first_name = message?.from?.first_name;
						const last_name = message?.from?.last_name || "";

						if (username && telegram_id) {
							await ctx.replyWithChatAction("typing");
							// Check if the user exists and create it if it doesn't
							const { isUserExist, user } = await checkAndReturnUser(
								telegram_id,
							);
							console.log(isUserExist, "384 isUserExist")

							if (isUserExist === false || !user?.inviter) {
								console.log(387)
								if (
									first_name && username &&
									message?.from?.id && !user?.inviter &&
										message?.from?.language_code && message?.chat?.id
									) {
										console.log("392")
										const userObj: CreateUserT = {
										id: message?.from?.id,
										username,
										first_name,
										last_name,
										is_bot: message?.from?.is_bot,
										language_code: message?.from?.language_code,
										chat_id: message?.chat?.id,
										inviter: inviter_user_id,
										invitation_codes,
										telegram_id: message?.from?.id,
										select_izbushka,
									};
									await ctx.replyWithChatAction("typing");
									const user = await createUser(userObj);
									console.log(user, "user 407")
									console.log("356 sendMenu");
									await welcomeMenu(ctx);
									await startIzbushka(ctx);
									return;
								}
							} else {
								const { isUserExist, user } = await checkAndReturnUser(
									telegram_id,
								);
								if (isUserExist && user?.inviter) {
									await ctx.replyWithChatAction("typing");
									const { izbushka } = await getSelectIzbushkaId(
										select_izbushka,
									);

									if (
										izbushka && user && first_name &&
										user.telegram_id && izbushka.workspace_id
									) {
										const passport_user: PassportUser = {
											user_id: user.user_id,
											workspace_id: izbushka.workspace_id,
											room_id: izbushka.room_id,
											username,
											first_name,
											last_name,
											chat_id: user.telegram_id,
											type: "room",
											is_owner: false,
											photo_url: user.photo_url || null,
										};

										const isPassportExist = await checkPassportByRoomId(
											user.user_id,
											izbushka.room_id,
											"room",
										);

										if (!isPassportExist) {
											await setPassport(passport_user);
										}

										if (select_izbushka && telegram_id) {
											await setSelectedIzbushka(
												telegram_id,
												select_izbushka,
											);
										}

										await startIzbushka(ctx);
										return;
									} else {
										const textError = `${
											lang
												? "ü§î –û—à–∏–±–∫–∞: getSelectIzbushkaId."
												: "ü§î Error: getSelectIzbushkaId."
										}\n${JSON.stringify(izbushka)}`;
										await ctx.reply(
											textError,
										);
										throw new Error(textError);
									}
								}
							}
						}
					}
				} catch (error) {
					const textError = `${
						lang
							? "ü§î –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
							: "ü§î Something went wrong, try again."
					}\n${JSON.stringify(error)}`;
					await ctx.reply(textError);
					await bugCatcherRequest(
						"neuro_calls_bot (select_izbushka && inviter)",
						JSON.stringify(error),
					);
					return;
				}
			} else {
				if (username && telegram_id) {
					// Check if the user exists and send the corresponding message
					const { isUserExist, user } = await checkAndReturnUser(telegram_id);
					console.log(user, "user");
					if (isUserExist && user?.inviter) {
						console.log("440 sendMenu");
						language_code && await welcomeMenu(ctx);
					} else {
						language_code && await welcomeMessage(ctx);
					}
					return;
				} else {
					const textError = `${
						lang
							? "ü§î –û—à–∏–±–∫–∞: Username not found."
							: "ü§î Error: Username not found."
					}`;
					await ctx.reply(textError);
					throw new Error(textError);
				}
			}
		}
	} else {
const isSubscription = await checkSubscription(
		ctx,
		ctx.from?.id,
		chatIdSubscription(lang)
	);
	if (!isSubscription) {
		await ctx.reply(lang ? "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üëÅ‚Äçüó®" : "You are not subscribed to the channel. To continue, you need to subscribe to the channel üëÅ‚Äçüó®",
			{
				reply_markup: { inline_keyboard: [
					[{ text: lang ? "üëÅ‚Äçüó® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" : "üëÅ‚Äçüó® Subscribe", url: lang ? "https://t.me/neurocalls_blog" : "https://t.me/neurocalls_en_blog" }],
				] }
				}
			);
			return;
		}
		if (username && telegram_id) {
			try {
				const { isUserExist, user } = await checkAndReturnUser(
					telegram_id,
				);

				if (isUserExist && user?.inviter) {
					console.log("465 sendMenu ", user.inviter);
					language_code && await welcomeMenu(ctx);
				} else {
					language_code && await welcomeMessage(ctx);
				}
				return;
			} catch (error) {
				await ctx.reply(
					`${
						lang
							? "ü§î –û—à–∏–±–∫–∞: checkAndReturnUser."
							: "ü§î Error: checkAndReturnUser."
					}\n${error}`,
				);
				await bugCatcherRequest(
					"neuro_calls_bot (select_izbushka && inviter)",
					JSON.stringify(error),
				);
				throw new Error("Error: checkAndReturnUser.");
			}
		}
	}
});

botNeuroCalls.command("buy", async (ctx) => {
	await checkAndUpdate(ctx)
	const lang = await isRu(ctx)
	ctx.reply(lang ? `<b>üöÄ –ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç - 432 ‚≠êÔ∏è –≤ –º–µ—Å—è—Ü</b>
–ß–∞—Ç —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, –∑–∞–¥–∞—á–∞–º–∏, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤ + 1 –≤–∏–¥–µ–æ–∑–∞–ª GPT, 3 —á–∞—Å–∞ –∑–∞–ø–∏—Å–∏, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥—É—Ä—É –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
	
<b>üè¢ –ù–µ–π—Ä–æ–ë–∞–∑–∞ - –ì—Ä—É–ø–ø–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö - 4754 ‚≠êÔ∏è –≤ –º–µ—Å—è—Ü</b>
–í—Å–µ –≤ Start + —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, 3-—á–∞—Å–æ–≤–æ–π –≤–∏–¥–µ–æ–∑–∞–ª, 18-—á–∞—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å.
	
<b>üíº –ù–µ–π—Ä–æ–û—Ñ–∏—Å - –ì—Ä—É–ø–ø–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö - —Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è</b>
–ù–µ–π—Ä–æ-–æ—Ñ–∏—Å –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å –Ω–∞–¥–µ–∂–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –º–∞–≥–∏—Å—Ç—Ä–æ–º, –æ–±—É—á–µ–Ω–Ω—ã–º —Ä–∞–±–æ—Ç–µ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.`
	 : `<b>üöÄ NeuroStart - 432 ‚≠êÔ∏è per month</b>
Chat with memories + GPT 1 video room, 3 hours rec, AI guru assistant.
	 
<b>üè¢ NeuroBasic - Group session for beginners - 4754 ‚≠êÔ∏è per month</b>
Everything in Start + AI functions, 3 hour video room, 18 hour rec.
	 
<b>üíº NeuroOffice - Group session for advanced users - custom per month</b>
Neuro-office for your company with a safe and friendly llm trained on your data.`, {
		reply_markup: {
			inline_keyboard: [[{ text: lang ? "üöÄ –ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç" : "üöÄ NeuroStart", callback_data: "buy_neurostart" }], [{ text: lang ? "üè¢ –ù–µ–π—Ä–æ–ë–∞–∑–∞" : "NeuroBasic", callback_data: "buy_neurobasic" }], [{ text: lang ? "üíº –ù–µ–π—Ä–æ–û—Ñ–∏—Å" : "üíº NeuroOffice", callback_data: "buy_neurooffice" }]],
		},
		parse_mode: "HTML",
	})
	return;
});

botNeuroCalls.on("pre_checkout_query", (ctx) => {
	ctx.answerPreCheckoutQuery(true)
	return;
});

botNeuroCalls.on("message:successful_payment", async (ctx) => {
	await checkAndUpdate(ctx)
	const lang = await isRu(ctx)
	console.log("ctx 646(succesful_payment)", ctx)
	const level = ctx.message.successful_payment.invoice_payload
	if (!ctx.from?.username) throw new Error("No username");
	const user_id = await getUid(ctx.from.username)
	if (!user_id) throw new Error("No user_id");
	await sendPaymentInfo(user_id, level)
	const levelForMessage = level === "neurostart" ? lang ? "üöÄ –ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç" : "üöÄ NeuroStart" : level === "neurobasic" ? lang ? "üè¢ –ù–µ–π—Ä–æ–ë–∞–∑–∞" : "üè¢ NeuroBasic" : lang ? "üíº –ù–µ–π—Ä–æ–û—Ñ–∏—Å" : "üíº NeuroOffice"
	await ctx.reply(lang ? "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!" : "ü§ù Thank you for the purchase!");
	const textToPost = lang ? `ü™ô @${ctx.from.username} —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É —É—Ä–æ–≤–Ω—è ${levelForMessage}!` : `ü™ô @${ctx.from.username} thank you for the purchase level ${levelForMessage}!`
	await ctx.api.sendMessage("-1001476314188", textToPost)
	await ctx.api.sendMessage("-1001729610573", textToPost)
	return;
});

botNeuroCalls.command("language", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const { user } = await checkAndReturnUser(ctx.from?.id.toString());
	const lang = await isRu(ctx)
	user && ctx.reply(lang ? "üåè –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫" : "üåè Select language", {
		reply_markup: {
			inline_keyboard: [
				[{ text: lang ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá∑üá∫ Russian", callback_data: "select_russian" }],
				[{ text: lang ? "üá¨üáß English" : "üá¨üáß English", callback_data: "select_english" }],
			],
		},
	})
});

botNeuroCalls.command("digital_avatar", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)

	await ctx.reply(
		lang ? "–°–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞" : "Create digital avatar",
		{
			reply_markup: {
				inline_keyboard: [[{
					text: lang ? "–°–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞" : "Create digital avatar",
					callback_data: "create_digital_avatar",
				}]],
			},
		},
	);
	return;
});

botNeuroCalls.command("text_to_speech", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	const lang = await isRu(ctx)
	if (!ctx.from?.id) throw new Error("No user id");
	const isHaveVoiceId = await isVoiceId(ctx.from?.id.toString())
	console.log(isHaveVoiceId, "isHaveVoiceId")
	if (!isHaveVoiceId) {
		await ctx.reply(lang ? "üîÆ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º /text_to_speech, –≤–≤–µ–¥–∏—Ç–µ /voice." : "üîÆ Please enter /voice to use /text_to_speech.")
		return
	}
	const text = lang
		? "üîÆ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
		: "üîÆ Please send the text you want to convert to a voice message.";

	await ctx.reply(text, {
		reply_markup: {
			force_reply: true,
		},
	});
	return;
});

botNeuroCalls.command("reset_voice", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	const lang = await isRu(ctx)
	const telegram_id = ctx.from?.id.toString();

	if (!telegram_id) throw new Error("No telegram_id");

	const text = lang
		? "üîÆ –ì–æ–ª–æ—Å —Ç–≤–æ–µ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω, –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π."
		: "üîÆ The voice of your digital avatar has been successfully reset, and now you can create a new one.";
	try {
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
		await updateUser(telegram_id, { voice_id_synclabs: null });
		await ctx.reply(text)
	} catch (error) {
		await ctx.reply(
			lang
				? "ü§î –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≥–æ–ª–æ—Å–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."
				: "ü§î Error resetting digital avatar voice.",
		);
		await bugCatcherRequest(
			"neuro_calls_bot (reset_voice)",
			JSON.stringify(error),
		);
		throw new Error("Error resetting digital avatar voice.");
	}
});

botNeuroCalls.command("voice", async (ctx) => {
	await checkAndUpdate(ctx)
	console.log("voice");
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const text = lang
	  ? "üîÆ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º."
	  : "üîÆ Please send me a voice message, and I will use it to create a voice avatar that speaks in your own voice.";

	await ctx.reply(text, {
		reply_markup: {
			force_reply: true
		}
	});
	// await ctx.reply(lang ? "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å –ù–µ–π—Ä–æ–ë–∞–∑–∞ üè¢" : "To use this function, you need to purchase the NeuroBasic level üè¢")
	return
});

botNeuroCalls.command("face", async (ctx) => {
	await checkAndUpdate(ctx)
	console.log("face");
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	await ctx.reply(lang ? "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å –ù–µ–π—Ä–æ–ë–∞–∑–∞ üè¢" : "To use this function, you need to purchase the NeuroBasic level üè¢")
	return
})

botNeuroCalls.command("model", async (ctx) => {
	await checkAndUpdate(ctx)
	console.log("model");
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	// await ctx.reply(lang ? "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å –ù–µ–π—Ä–æ–ë–∞–∑–∞ üè¢" : "To use this function, you need to purchase the NeuroBasic level üè¢")
	await ctx.reply(lang ? "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò" : "üß†Select Model Ai", {
		reply_markup: {
			inline_keyboard: [
				[{ text: "GPT-4", callback_data: "model_gpt-4" }, { text: "GPT-4o", callback_data: "model_gpt-4o" }, { text: "GPT-4-turbo", callback_data: "model_gpt-4-turbo"}],
				[{ text: "GPT-3.5-turbo", callback_data: "model_gpt-3.5-turbo"}],
			],
		},
	})
	return
})

// botNeuroCalls.command("top", async (ctx) => {
// 	await checkAndUpdate(ctx)
// 	console.log("top");
// 	await ctx.replyWithChatAction("typing");
// 	if (!ctx.from) throw new Error("User not found");
// 	const lang = await isRu(ctx)
// 	const top10Users = await getTop10Users();
// 	console.log(top10Users, "top10Users");
// 	const leaderboardText = top10Users.map((user, index) => {
// 		return `${index + 1}. ${user.username} - ${user.all} $IGLA`;
// 	}).join('\n');

// 	await ctx.reply(lang ? `–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n${leaderboardText}` : `Top 10 users:\n${leaderboardText}`);
// 	return
// })

botNeuroCalls.command("mode", async (ctx) => {
	await checkAndUpdate(ctx)
	console.log("mode");
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx);
	await ctx.reply(`${lang ? "üì≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò" : "üì≥ Select AI communication mode"}`, {
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: `üî• ${lang ? "–ß–∞—Ç —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏" : "Chat with memories"}`,
						callback_data: "mode_memories",
					},
					 {
						text: `üî• ${lang ? "–ß–∏—Å—Ç—ã–π GPT" : "Clean GPT"}`,
						callback_data: "mode_clean",
					},
				],
			],
		},
	});
	return
});

botNeuroCalls.on("message:voice", async (ctx) => {
	await checkAndUpdate(ctx)
	const voice = ctx.msg.voice;
	const lang = await isRu(ctx)
	console.log(voice, "voice");
	const fileId = voice.file_id;
	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	const file = await ctx.api.getFile(fileId);
	const filePath = file.file_path;
	const fileUrl = `https://api.telegram.org/file/bot${NEURO_CALLS}/${filePath}`;

	console.log(fileUrl, "fileUrl");
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ ElevenLabs –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞
	const telegram_id = ctx.from?.id.toString();
	const username = ctx.from?.username;
	if (!username) throw new Error("No username");

	if (ctx.message.reply_to_message) {
		const originalMessageText = ctx.message.reply_to_message?.text
		if (originalMessageText?.includes("üîÆ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º."
		|| "üîÆ Please send me a voice message, and I will use it to create a voice avatar that speaks in your own voice.")) {
	const voiceId = await createVoiceSyncLabs({
		fileUrl,
		username
	});
	console.log(voiceId, "voiceId");
	if (voiceId) {
		await ctx.reply(lang ? `üëÅ –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! Voice ID: ${voiceId}` : `üëÅ Avatar voice created successfully! Voice ID: ${voiceId}`);
		await updateUser(telegram_id, { voice_id_synclabs: voiceId });
	} else {
		await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞.");
		}
		}
	}
	return
});

botNeuroCalls.on("message:text", async (ctx: Context) => {
	await checkAndUpdate(ctx)
	if (ctx.message?.text?.startsWith("/")) return;
	await ctx.replyWithChatAction("typing");
	const inviter = ctx?.message?.text;
	const message = ctx.update.message;
	const language_code = message?.from?.language_code;
	const username = message?.from?.username;
	const telegram_id = message?.from?.id.toString();

	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)

	// Check if the message is a reply (if there is a reply_to_message)
	if (ctx?.message?.reply_to_message) {
		// Check if the original message text contains a specific text
		const query = ctx.message.text;
		const originalMessageText = ctx?.message?.reply_to_message?.caption
			? ctx?.message?.reply_to_message?.caption
			: ctx?.message?.reply_to_message?.text;

		if (
			originalMessageText?.includes(
				"üîÆ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
			) ||
			originalMessageText?.includes(
				"üîÆ Please send the text you want to convert to a voice message.",
			)
		) {
			await ctx.replyWithChatAction("record_voice");
			const telegram_id = ctx.from?.id.toString()
			if (!telegram_id) throw new Error("No telegram_id")
			const voice_id_synclabs = await getVoiceId(telegram_id)
			if (!voice_id_synclabs) {
				await ctx.reply(lang ? "üîÆ –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –≥–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä—É. –õ–∏–±–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –≤–∞–º –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ —Ç–æ–º —á—Ç–æ –≤–∞—à Voice ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω.	" : "üîÆ You haven't assigned a voice to your avatar yet. Or wait for an answer about your Voice ID being successfully assigned.")
				return
			}
			if (!query) throw new Error("No query")
			const speech = await createSpeech(query, voice_id_synclabs)
			console.log(speech, "speech")
			return;
		}
		if (ctx?.message?.reply_to_message) {
			console.log(ctx);
			const originalMessageText = ctx?.message?.reply_to_message?.caption
				? ctx?.message?.reply_to_message?.caption
				: ctx?.message?.reply_to_message?.text;
			if (
				originalMessageText &&
				originalMessageText.includes(lang ? "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç" : "Send text")
			) {
				const text = ctx?.message?.text || "";

				if (!text && !message?.from?.id) throw new Error("No text or user_id");
				if (!username) throw new Error("No username");
				if (!telegram_id) throw new Error("No telegram_id");

				const { user } = await checkAndReturnUser(
					telegram_id,
				);

				if (!user) throw new Error("User not found");

				await createVideo({
					avatar_id: user?.avatar_id,
					voice_id: user?.voice_id,
					text,
					user_id: user.user_id,
				});
				await ctx.reply(
					`${
						language_code === "ru"
							? "–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ –≤–∞–º –ø—Ä–∏–¥–µ—Ç –≤–∏–¥–µ–æ"
							: "Wait, your video is ready"
					}`,
				);
				return;
			}

			if (
				ctx.from && originalMessageText && originalMessageText.includes(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ avatar_id"
						: "Please, specify your avatar_id:",
				)
			) {
				await updateUser(ctx.from.id.toString(), { avatar_id: query });
				await ctx.reply(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ voice_id:"
						: "Please, specify your voice_id:",
					{
						reply_markup: { force_reply: true },
					},
				);
				return;
			}

			if (
				ctx.from && originalMessageText && originalMessageText.includes(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ voice_id"
						: "Please, specify your voice_id:",
				)
			) {
				await updateUser(ctx.from.id.toString(), { voice_id: query });
				await ctx.reply(
					lang
						? "–í–∞—à Digital Avatar —Å–æ–∑–¥–∞–Ω!"
						: "Your Digital Avatar is created!",
				);
				return;
			}

			if (
				ctx.from && originalMessageText && originalMessageText.includes(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ audio_id"
						: "Please, specify your audio_id:",
				)
			) {
				await updateUser(ctx.from.id.toString(), { audio_id: query });
				await ctx.reply(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ avatar_id:"
						: "Please, specify your avatar_id:",
					{
						reply_markup: { force_reply: true },
					},
				);
				return;
			}

			if (
				ctx.from && originalMessageText && originalMessageText.includes(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:"
						: "Please, specify your company name:",
				)
			) {
				await updateUser(ctx.from.id.toString(), { company: query });
				await ctx.reply(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
						: "Please, specify your designation:",
					{
						reply_markup: { force_reply: true },
					},
				);
				return;
			}

			if (
				ctx.from && originalMessageText && originalMessageText.includes(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
						: "Please, specify your designation:",
				)
			) {
				await updateUser(ctx.from.id.toString(), { position: query });
				await ctx.reply(
					lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:"
						: "Please, specify your skills and interests:",
					{
						reply_markup: { force_reply: true },
					},
				);
				return;
			}

			if (
				ctx.from && originalMessageText && originalMessageText.includes(
						lang
						? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:"
						: "Please, specify your skills and interests:",
				)
			) {
				await updateUser(ctx.from.id.toString(), { designation: query });
				await ctx.reply(
					lang
						? "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
						: "Thank you for the provided information!",
				);
				return;
			}
		}

		console.log(originalMessageText, "originalMessageText");
		if (
			originalMessageText || originalMessageText &&
				(originalMessageText.includes("üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å") ||
					originalMessageText.includes("üè∞ Welcome") ||
					originalMessageText.includes("üîí Oh, my apologies!") ||
					originalMessageText.includes("üîí –û—Ö, —É–≤—ã –∏ –∞—Ö!"))
		) {
			try {
				const { isInviterExist, inviter_user_id } = await checkUsernameCodes(
					inviter as string,
				);

				if (isInviterExist) {
					console.log(message, "message");
					const user = {
						id: message?.from?.id,
						username: message?.from?.username,
						first_name: message?.from?.first_name,
						last_name: message?.from?.last_name,
						is_bot: message?.from?.is_bot,
						language_code,
						chat_id: message?.chat?.id,
						inviter: inviter_user_id,
						invitation_codes: "",
						telegram_id: message?.from?.id,
					};
					console.log(user, "user");
					const newUser = await createUser(user);
					await ctx.replyWithChatAction("typing");

					if (newUser) {
						await ctx.replyWithVideo(videoUrl(lang), {
							caption: await intro(ctx),
							reply_markup: {
								inline_keyboard: await menuButton(ctx),
							},
						});
					}
					return;
				} else {
					await ctx.reply(await textError(ctx), {
						reply_markup: {
							force_reply: true,
						},
					});
					return;
				}
			} catch (error) {
				console.error(error);
			}
		} else {
			console.log("else!!!");
			return;
		}
	} else {
		await ctx.replyWithChatAction("typing");
		if (ctx.message?.text?.startsWith("/")) return;
		const query = ctx?.message?.text;

		const {isUserExist} = await checkAndReturnUser(ctx.from.id.toString())
		if (!isUserExist) {
			await ctx.reply(await textError(ctx), {
				reply_markup: {
					force_reply: true,
				},
			});
			return;
		}
		
		const username = ctx?.update?.message?.from?.username;

		if (!username || !language_code) return;
		const mode = await getMode(ctx.from.id.toString());
		
		if (mode === "memories") {
			const id_array = await getPassportsTasksByUsername(username);
			if (query && id_array && id_array.length > 0) {
			const { ai_content, tasks } = await getAiFeedbackFromSupabase({
				query,
				id_array,
				username,
				language_code,
			});

			let tasksMessage = `üìù ${lang ? "–ó–∞–¥–∞—á–∏:\n" : "Tasks:\n"}`;
			tasks.forEach((task) => {
				tasksMessage += `\n${task.title}\n${task.description}\n`;
			});

			await ctx.reply(`${ai_content}\n\n${tasksMessage}`, {
				parse_mode: "Markdown",
			});
			return;
		} else {
			const textError = `${
				lang
					? "ü§î –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏."
					: "ü§î Error: failed to load tasks."
			}`;
			await ctx.reply(textError);
			return;
		}
	} else if (mode === "clean") {
		const model = await getModel(ctx.from.id.toString())
		console.log(model, "model");

		if (!model) throw new Error("Model not found")
		if (!query) throw new Error("Query not found")

		const language = lang ? "ru" : "en"
		if (!language) throw new Error("Language not found")
		const answer = await answerAi(query, language, model)
		if (!answer) throw new Error("Answer not found")

		await ctx.reply(answer, {parse_mode: "Markdown"})
	}
}
	return
});

botNeuroCalls.on("callback_query:data", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const callbackData = ctx.callbackQuery.data;

	const telegram_id = ctx.callbackQuery.from.id.toString();
	const username = ctx.update && ctx.update.callback_query.from.username;

	await ctx.replyWithChatAction("typing");
	console.log(ctx);

	if (callbackData.startsWith("buy")) {
		if (callbackData.endsWith("neurostart")) {
			await ctx.replyWithInvoice(
				lang ? "üöÄ –ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç" : "üöÄ NeuroStart",
				lang ? "–ß–∞—Ç —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, –∑–∞–¥–∞—á–∞–º–∏, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤ + 1 –≤–∏–¥–µ–æ–∑–∞–ª GPT, 3 —á–∞—Å–∞ –∑–∞–ø–∏—Å–∏, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥—É—Ä—É –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞." : "Chat with memories + GPT 1 video room, 3 hours rec, AI guru assistant.",
				"neurostart",
				"", // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
				"XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
				[{ label: "–¶–µ–Ω–∞", amount: 432 }],
			);
			return
		}
		if (callbackData.endsWith("neurobasic")) {
			await ctx.replyWithInvoice(
				lang ? "üè¢ –ù–µ–π—Ä–æ–ë–∞–∑–∞" : "üè¢ NeuroBasic",
				lang ? "–í—Å–µ –≤ Start + —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, 3-—á–∞—Å–æ–≤–æ–π –≤–∏–¥–µ–æ–∑–∞–ª, 18-—á–∞—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å." : "Everything in Start + AI functions, 3 hour video room, 18 hour rec.",
				"neurobasic",
				"", // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
				"XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
				[{ label: "–¶–µ–Ω–∞", amount: 4754 }], // –¶–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö (10.00 Stars)
			);
			return
		}
		if (callbackData.endsWith("neurooffice")) {
      await ctx.reply( lang ? "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @neurocalls üìû" : "To find out the price and subscribe, contact @neurocalls üìû")
			return
		}
	}
	if (callbackData === "select_russian") {
		await setLanguage(ctx.from?.id.toString(), "ru");
		await ctx.reply("üá∑üá∫ –í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π");
	}
	if (callbackData === "select_english") {
		await setLanguage(ctx.from?.id.toString(), "en");
		await ctx.reply("üá¨üáß English selected");
	}

	if (callbackData.startsWith("create_soul")) {
		if (ctx.callbackQuery.from.id) {
			console.log("editMessageReplyMarkup")
			await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
		}
		await ctx.reply(
			lang
				? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:"
				: "Please, specify your company name:",
			{ reply_markup: { force_reply: true } },
		);
		return;
	}

	if (callbackData.startsWith("create_digital_avatar")) {
		if (ctx.callbackQuery.from.id) {
			console.log("editMessageReplyMarkup")
			await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
		}
		await ctx.reply(
			lang
				? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ video_id:"
				: "Please, specify your video_id:",
			{ reply_markup: { force_reply: true } },
		);
		return;
	}

	if (callbackData.startsWith("model_")) {
		const model = callbackData.split("_")[1];
		console.log(model, "model");
		await setModel(telegram_id, model);
		await ctx.reply(lang ? `üîã –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å ${model}` : `üîã You selected the model ${model}`);
		return;
	}

	
	if (callbackData.startsWith("mode")) {
		const mode = callbackData.split("_")[1]
		await setMode(ctx.from.id.toString(), mode)
		const modeToReply = mode === "clean" ? lang ? "–ß–∏—Å—Ç—ã–π GPT" : "Clean GPT" : lang ? "–ß–∞—Ç —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏" : "Chat with memories"
		await ctx.reply(`${lang ? "–í–∞—à —Ä–µ–∂–∏–º: " : "Your mode: "}${modeToReply}`);
		return;
	}

	const handleRoomSelection = async (
		ctx: Context,
		rooms: RoomNode[],
		type: string,
	) => {
		try {
			if (rooms && rooms.length > 0) {
				const keyboard = rooms
					.filter((room: RoomNode) => room)
					.map((room: RoomNode) => ({
						text: room.name,
						callback_data: `select_izbushka_${room.id}`,
					}))
					.reduce(
						(
							acc: { text: string; callback_data: string }[][],
							curr: { text: string; callback_data: string },
							index: number,
						) => {
							const row = Math.floor(index / 1);
							acc[row] = acc[row] || [];
							acc[row].push(curr);
							return acc;
						},
						[],
					);

				await ctx.replyWithChatAction("typing");
				if (type === "neurostart") {
					const textStart = `üöÄ ${
						lang
							? "–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã - —ç—Ç–æ –ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã, –≥–¥–µ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –ø–∏—à—É—Ç—Å—è –∏ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è."
							: "My rooms - private rooms where your words are written and tasks are created."
					}`;
					await ctx.reply(
						textStart,
						{
							reply_markup: { inline_keyboard: keyboard },
						},
					);
					return;
				} else if (type === "neurobasic") {
					const textBasic = `üè¢ ${
						lang
							? "–í –≥–æ—Å—Ç—è—Ö - —ç—Ç–æ –∫–æ–º–Ω–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
							: "In the guest - rooms where you were invited by another user."
					}`;
					await ctx.reply(
						textBasic,
						{
							reply_markup: { inline_keyboard: keyboard },
						},
					);
					return;
				} else if (type === "neurooffice") {
					const textOffice = `üíº ${
						lang
							? "–û–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –∫–æ–º–Ω–∞—Ç—ã, –≥–¥–µ –æ–±—É—á–µ–Ω–∏–µ –∫ –º—É–¥—Ä–æ—Å—Ç–∏ —Ç–µ–±—è –≤–µ–¥–µ—Ç."
							: "Learning - rooms where the training to wisdom guides you."
					}`;
					await ctx.reply(
						textOffice,
						{
							reply_markup: { inline_keyboard: keyboard },
						},
					);
					return;
				}
				return;
			} else {
				const textError = `${
					lang
						? "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç –∫—É–¥–∞ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏"
						: "You don't have any rooms where you were invited"
				}`;
				await ctx.reply(textError);
				return;
			}
		} catch (error) {
			const textError = `${
				lang ? "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–Ω–∞—Ç—ã" : "Error selecting the room"
			}`;
			await ctx.reply(textError, error);
			throw new Error(textError);
		}
	};

	if (callbackData === "neurostart") {
		const rooms = username && (await getRooms(username));
		rooms && await handleRoomSelection(ctx, rooms, "neurostart");
	} else if (callbackData === "neurobasic") {
		const rooms = username && (await getRoomsWater(username));
		rooms && await handleRoomSelection(ctx, rooms, "neurobasic");
	} else if (callbackData === "neurooffice") {
		const rooms = await getRoomsCopperPipes();
		rooms && await handleRoomSelection(ctx, rooms, "neurooffice");
	}

	if (callbackData === "name_izbushka") {
		try {
			const textQuestion = `${
				lang ? "–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –∫–æ–º–Ω–∞—Ç—É?" : "How do we name the room?"
			}`;
			await ctx.reply(textQuestion, {
				reply_markup: {
					force_reply: true,
				},
			});
			return;
		} catch (error) {
			console.error(error);
			await bugCatcherRequest("neuro_calls_bot (name_izbushka)", error);
			throw new Error("neuro_calls_bot (name_izbushka)");
		}
	}

	if (callbackData === "show_izbushka") {
		const rooms = username && (await getRooms(username));
		// console.log(rooms, "rooms");
		try {
			if (Array.isArray(rooms)) {
				const textSelectRoom = `${lang ? "üè° –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É" : "Select the room"}`;
				await ctx.reply(textSelectRoom, {
					reply_markup: {
						inline_keyboard: rooms
							.filter((room: RoomNode) => room)
							.map((room: RoomNode) => ({
								text: room.name,
								callback_data: `select_izbushka_${room.id}`,
							}))
							.reduce(
								(
									acc: { text: string; callback_data: string }[][],
									curr,
									index,
								) => {
									const row = Math.floor(index / 1);
									acc[row] = acc[row] || [];
									acc[row].push(curr);
									return acc;
								},
								[],
							),
					},
				});
			} else {
				const textError = `${
					lang ? "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É." : "Error: failed to load room."
				}`;
				await ctx.reply(textError);
				await bugCatcherRequest("neuro_calls_bot (show_izbushka)", ctx);
				throw new Error("neuro_calls_bot (show_izbushka)");
			}
			return;
		} catch (error) {
			console.error("error show_izbushka", error);
			await bugCatcherRequest("neuro_calls_bot (show_izbushka)", ctx);
			throw new Error("neuro_calls_bot (show_izbushka)");
		}
	}

	if (callbackData.includes("select_izbushka")) {
		try {
			const select_izbushka = callbackData.split("_")[2];

			if (select_izbushka) {
				telegram_id && await setSelectedIzbushka(telegram_id, select_izbushka);
			}
			const textForInvite = `${
				lang
					? 'üì∫ –ß—Ç–æ –∂, –ø—É—Ç–Ω–∏–∫ –¥–æ—Ä–æ–≥–æ–π, –¥–∞–±—ã —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "Spaces" —Å–º–µ–ª–µ–µ –∏ –≤–µ—Å–µ–ª–∏—Å—å, –∏–±–æ –≤—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –Ω–∞—á–∞–ª—É —Ç–≤–æ–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ —Ü–∏—Ñ—Ä–æ–≤—ã–º –ø—Ä–æ—Å—Ç–æ—Ä–∞–º!\n\nüåü –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ.'
					: 'What, traveler, to start the broadcast, press the "Spaces" button more joyfully and laugh, because all is prepared for the start of your journey through the digital spaces! \n\nüåü Share the following link with the person you want to meet in the room.'
			}`;
			await ctx.reply(
				textForInvite,
			);
			await delay(500);

			const textInvite = `${
				lang
					? `üè∞ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ù–µ–π—Ä–æ–ó–≤–æ–Ω–∫–∏** üè∞\n[–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!](https://t.me/${botUsernameNeuroCalls}?start=${select_izbushka}_${telegram_id})\n\n–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **Spaces**, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤—Å—Ç—Ä–µ—á—É.\n[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è](https://youtube.com/shorts/YKG-1fdEtAs?si=ojKvK2DfPsZ0mbd5)`
					: `Invitation to the NeuroCalls\n[Press the link to join!](https://t.me/${botUsernameNeuroCalls}?start=${select_izbushka}_${telegram_id})\n\nAfter connecting to the bot, press the **Spaces** button to enter the video meeting.\n[Instruction for connecting](https://youtube.com/shorts/YKG-1fdEtAs?si=ojKvK2DfPsZ0mbd5)`
			}`;

			await ctx.reply(textInvite, { parse_mode: "Markdown" });

			return;
		} catch (error) {
			await bugCatcherRequest("neuro_calls_bot (select_izbushka)", error);
			throw new Error("neuro_calls_bot (select_izbushka)");
		}
	}
return
});

await botNeuroCalls.api.setMyCommands([
	{
		command: "/start",
		description: "üöÄ Start chatting with NeuroCalls",
	},
	// {
	//   command: "/avatar",
	//   description: "Create a digital avatar",
	// },
	{
		command: "/language",
		description: "üåê Select language",
	},
	{
		command: "/soul",
		description: "üÜî Fill your avatar's soul",
	},
	// {
	// 	command: "/face",
	// 	description: "ü§ì Add avatar's face",
	// },
	{
		command: "/mode",
		description: "üì≥ Select AI communication mode",
	},
	{
		command: "/model",
		description: "üß† Add avatar's model",
	},
	{
		command: "/text_to_speech",
		description: "üîä Convert text to speech",
	},
	{
		command: "/reset_voice",
		description: "üîä Reset avatar's voice",
	},
	{
		command: "/voice",
		description: "üé§ Add avatar's voice",
	},
	{
		command: "/buy",
		description: "üõí Buy subscription",
	},
	// {
	//   command: "/reset_voice",
	//   description: "Reset voice ai-avatar",
	// },
	{
		command: "/getchatid",
		description: "üÜî Get chat ID",
	},
]);

botNeuroCalls.catch((err) => {
	const ctx = err.ctx;
	console.error(`Error while handling update ${ctx.update.update_id}:`);
	const e = err.error;
	if (e instanceof GrammyError) {
		console.error("Error in request:", e.description);
	} else if (e instanceof HttpError) {
		console.error("Could not contact Telegram:", e);
		throw e;
	} else {
		console.error("Unknown error:", e);
		throw e;
	}
});

Deno.serve(async (req) => {
	try {
		const url = new URL(req.url);
		if (url.searchParams.get("secret") !== Deno.env.get("FUNCTION_SECRET")) {
			return new Response("not allowed", { status: 405 });
		}

		return await handleUpdateNeuroCalls(req);
	} catch (err) {
		console.error(err);
	}
});

// const textInvite = `${
//   isRu
//     ? `üè∞ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ** üè∞\n\n[–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!](https://t.me/${botUsernameNeuroCalls}?start=${select_izbushka}_${username})\n\n–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **Izbushka**, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤—Å—Ç—Ä–µ—á—É.`
//     : `Invitation to the **DAO 999 NFT**\n\nPress the link to join!](https://t.me/${botUsernameNeuroCalls}?start=${select_izbushka}_${username})\n\nAfter connecting to the bot, press the **Izbushka** button to enter the video meeting.`
// }`;
// const buttons = [
//   {
//     text: `${
//       isRu
//         ? "–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
//         : "Video instruction for connecting"
//     }`,
//     web_app: {
//       url: `https://youtube.com/shorts/YKG-1fdEtAs?si=ojKvK2DfPsZ0mbd5`,
//     },
//   },
// ];

// supabase functions deploy neuro-calls --no-verify-jwt
