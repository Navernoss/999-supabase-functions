// Setup type definitions for built-in Supabase Runtime APIs
/// <reference types="https://esm.sh/@supabase/functions-js/src/edge-runtime.d.ts" />

import {
	Context,
	GrammyError,
	HttpError,
} from "https://deno.land/x/grammy@v1.8.3/mod.ts";

import { checkSubscription } from "../check-subscription.ts";
import { createUser } from "../_shared/nextapi/index.ts";
import {
	botNeuroCoder,
	bugCatcherRequest,
	handleUpdateNeuroCoder,
} from "../_shared/telegram/bots.ts";
import { createQuestion } from "../_shared/openai/createQuestion.ts";
import { answerAi } from "../_shared/openai/answerAi.ts"
import {
	checkAndReturnUser,
	checkUsernameCodes,
	getLanguage,
	getUid,
	getUsernameByTelegramId,
	setLanguage,
	setModel,
	getModel,
	checkAndUpdate
} from "../_shared/supabase/users.ts";
import {
	getBiggest,
	getCorrects,
	getLastCallback,
	getQuestion,
	updateProgress,
	updateResult,
	getTop10Users
} from "../_shared/supabase/progress.ts";
import { pathIncrement } from "../path-increment.ts";
import { sendPaymentInfo } from "../_shared/supabase/payments.ts";

export type CreateUserT = {
	id: number;
	username: string;
	first_name: string;
	last_name: string;
	is_bot: boolean;
	language_code: string;
	chat_id: number;
	inviter: string;
	invitation_codes?: string;
	telegram_id: number;
	select_izbushka: string;
};
const isRu = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const language = await getLanguage(ctx.from?.id.toString());
	if (!language) return ctx.from.language_code === "ru"
	return language === "ru";
}

const videoUrl = (isRu: boolean) => isRu ? "https://t.me/dao999nft_storage/5" : "https://t.me/dao999nft_storage/6";

const mediaChatId = (lang: boolean) => lang ? "-1001483746067" : "-1002015840738"

const textError = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	return `üîí ${
		lang
			? "–û—Ö, —É–≤—ã –∏ –∞—Ö! –°–ª–æ–≤–µ—á–∫–æ, —á—Ç–æ –¥–æ –º–µ–Ω—è –¥–æ—à–ª–æ, —á–∞—Ä–∞–º —Ç–∞–π–Ω—ã–º –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ—à—É, –¥–∞–π –∑–Ω–∞—Ç—å –∏–Ω–æ–µ, —á—Ç–æ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º, —á—Ç–æ–± –ø—É—Ç—å —Ç–≤–æ–π –≤ —Ü–∞—Ä—Å—Ç–≤–æ –¥–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—É–º–µ–ª–∏ –±–µ–∑ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è.\n\n–õ–∏–±–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ –Ω–∞—à –∫—É—Ä—Å –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /neuro, –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Ç–æ–∫–µ–Ω $IGLA."
			: "Oh, my apologies! The word that came to me, the secret does not answer. Please, tell me another word that is the key to the right path, so that the path of your life is a strange and open way to the kingdom.\n\nOr you can try to pass our course on the neural networks, using the command /neuro, and earn our token $IGLA."
	}`;
};

const welcomeMenu = async (ctx: Context) => {
	console.log("‚úÖwelcomeMenu");
	await ctx.replyWithChatAction("upload_video");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const text = lang
		? `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞–ª–µ–≤–æ –ø–æ–π–¥–µ—à—å - –æ–≥–Ω–µ–º —Å–æ–≥—Ä–µ–µ—à—å—Å—è, –ø—Ä—è–º–æ –ø–æ–π–¥–µ—à—å - –≤ –≤–æ–¥–∏—á–∫–µ –æ–º–æ–ª–æ–¥–∏—à—å—Å—è, –∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ–π–¥–µ—à—å - –≤ –º–µ–¥–Ω—É—é —Ç—Ä—É–±—É –ø–æ–ø–∞–¥–µ—à—å.`
		: `üè∞ The hut turned its front to you, and its back to the forest. If you go to the left you will be warmed by the fire, you will go straight ahead in the water and you will rejuvenate, and to the right you will go into a copper pipe.`;

	await ctx.replyWithVideo(videoUrl(lang), {
		caption: text,
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: `${lang ? "–ù–µ–π—Ä–æ–°–∞–º" : "NeuroSelf"}`,
						callback_data: "neuro_self",
					},
					{
						text: `${lang ? "–ù–µ–π—Ä–æ–£—Ä–æ–∫" : "NeuroLesson"}`,
						callback_data: "neuro_lesson",
					},
					{
						text: `${lang ? "–ù–µ–π—Ä–æ–ë–æ—Ç—ã" : "NeuroBots"}`,
						callback_data: "neuro_bots",
					},
				],
			],
		},
	});

	return;
};

const welcomeMessage = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const text = lang
		? `üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ, ${ctx?.update?.message?.from?.first_name}! \n–í—Å–µ–º–æ–≥—É—â–∞—è –ë–∞–±–∞ –Ø–≥–∞, –≤–ª–∞–¥—ã—á–∏—Ü–∞ —Ç–∞–π–Ω –∏ —á–∞—Ä–æ–¥–µ–π–Ω–∏—Ü–∞, –ø—Ä–µ–¥ –≤—Ä–∞—Ç–∞ –Ω–µ–≤–µ–¥–æ–º–æ–≥–æ –º–∏—Ä–∞ —Ç–µ–±—è –ø—Ä–∏–≤–µ—á–∞–µ—Ç.\n–ß—Ç–æ–± –∏–∑–±–∞ –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∫–æ–º –æ–±–µ—Ä–Ω—É–ª–∞—Å—å, –∞ –Ω–µ –∑–∞–¥–æ–º —Å—Ç–æ—è–ª–∞, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ—à–µ–ø—Ç–∞—Ç—å –∫–∞–±—ã —Å–ª–æ–≤–µ—á–∫–æ-–ø—Ä–æ—Ö–æ–¥–Ω–æ–µ.`
		: `üè∞ Welcome, ${ctx?.update?.message?.from?.first_name}! \nThe all-powerful Babya Yaga, the ruler of secrets and charms, is preparing to confront you with the gates of the unknown world.\nTo save you from the front and not the back, remember to speak the word-a-word.`;

	await ctx.replyWithVideo(videoUrl(lang), {
		caption: text,
		reply_markup: {
			force_reply: true,
		},
	});
	return;
};

const intro = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const intro = lang
		? `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞ –ª–µ–≤–æ –ø–æ–π–¥–µ—à—å –æ–≥–Ω–µ–º —Å–æ–≥—Ä–µ–µ—à—å—Å—è, –ø—Ä—è–º–æ –ø–æ–π–¥–µ—à—å –≤ –≤–æ–¥–∏—á–∫–µ –æ–º–æ–ª–æ–¥–∏—à—å—Å—è, –∞ –Ω–∞ –ø—Ä–∞–≤–æ –ø–æ–π–¥–µ—à—å –≤ –º–µ–¥–Ω—É—é —Ç—Ä—É–±—É –ø–æ–ø–∞–¥–µ—à—å.`
		: `üè∞ The hut turned its front to you, and its back to the forest. If you go to the left you will be warmed by the fire, you will go straight ahead in the water and you will rejuvenate, and to the right you will go into a copper pipe.
`;
	return intro;
};

const menuButton = async (ctx: Context) => {
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const menuButton = [
		[
			{
				text: `üî• ${lang ? "–û–≥–æ–Ω—å" : "Fire"}`,
				callback_data: "fire",
			},
			{
				text: `üíß ${lang ? "–í–æ–¥–∞" : "Water"}`,
				callback_data: "water",
			},
			{
				text: `üé∫ ${lang ? "–ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã" : "Copper pipes"}`,
				callback_data: "copper_pipes",
			},
 
		],
	];
	return menuButton;
};

botNeuroCoder.command("neuro", async (ctx) => {
	console.log("neuro");
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
		try {
			const questionContext = {
				lesson_number: 1,
				subtopic: 1,
			};

			const questions = await getQuestion({
				ctx: questionContext,
				language: "automation",
			});
			if (questions.length > 0) {
				const {
					topic: ruTopic,
					image_lesson_url,
					topic_en: enTopic,
					url
				} = questions[0];

				const user_id = await getUid(ctx.from?.username || "");
				if (!user_id) {
					ctx.reply(lang ? "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." : "You are not registered.");
					return;
				}
				const topic = lang ? ruTopic : enTopic;
				const allAnswers = await getCorrects({
					user_id: user_id.toString(),
					language: "all",
				});

				const messageText =
					`${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

				const inlineKeyboard = [
					[{
						text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
						callback_data: `automation_01_01`,
					}],
				];

				if (url && lang) {
					console.log(url, "url");
					await ctx.replyWithVideoNote(url);
				}
				if (image_lesson_url) {
					await ctx.replyWithPhoto(image_lesson_url || "", {
						caption: messageText,
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				} else {
					await ctx.reply(messageText, {
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				}
			} else {
				await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
			}
		} catch (error) {
			console.error(error);
		}
});

botNeuroCoder.command("javascript", async (ctx) => {
	console.log("javascript");
	await checkAndUpdate(ctx)
	const theme = ctx.message?.text.substring(1)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	if (!theme) {
		await ctx.reply(lang ? "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." : "Theme not found.");
		return;
	}
		try {
			const questionContext = {
				lesson_number: 1,
				subtopic: 1,
			};

			const questions = await getQuestion({
				ctx: questionContext,
				language: theme,
			});
			if (questions.length > 0) {
				const {
					topic: ruTopic,
					image_lesson_url,
					topic_en: enTopic,
					url
				} = questions[0];

				const user_id = await getUid(ctx.from?.username || "");
				if (!user_id) {
					ctx.reply(lang ? "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." : "You are not registered.");
					return;
				}
				const topic = lang ? ruTopic : enTopic;
				const allAnswers = await getCorrects({
					user_id: user_id.toString(),
					language: "all",
				});
				const messageText =
					`${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

				const inlineKeyboard = [
					[{
						text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
						callback_data: `${theme}_01_01`,
					}],
				];

				if (url && lang) {
					console.log(url, "url");
					await ctx.replyWithVideoNote(url);
				}
				if (image_lesson_url) {
					await ctx.replyWithPhoto(image_lesson_url || "", {
						caption: messageText,
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				} else {
					await ctx.reply(messageText, {
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				}
			} else {
				await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
			}
		} catch (error) {
			console.error(error);
		}
});

botNeuroCoder.command("typescript", async (ctx) => {
	console.log("typescript");
	await checkAndUpdate(ctx)
	const theme = ctx.message?.text.substring(1)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	if (!theme) {
		await ctx.reply(lang ? "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." : "Theme not found.");
		return;
	}
		try {
			const questionContext = {
				lesson_number: 1,
				subtopic: 1,
			};

			const questions = await getQuestion({
				ctx: questionContext,
				language: theme,
			});
			if (questions.length > 0) {
				const {
					topic: ruTopic,
					image_lesson_url,
					topic_en: enTopic,
					url
				} = questions[0];

				const user_id = await getUid(ctx.from?.username || "");
				if (!user_id) {
					ctx.reply(lang ? "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." : "You are not registered.");
					return;
				}
				const topic = lang ? ruTopic : enTopic;
				const allAnswers = await getCorrects({
					user_id: user_id.toString(),
					language: "all",
				});
				// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				const messageText =
					`${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

				// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
				const inlineKeyboard = [
					[{
						text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
						callback_data: `${theme}_01_01`,
					}],
				];

				if (url && lang) {
					console.log(url, "url");
					await ctx.replyWithVideoNote(url);
				}
				if (image_lesson_url) {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
					await ctx.replyWithPhoto(image_lesson_url || "", {
						caption: messageText,
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				} else {
					await ctx.reply(messageText, {
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				}
			} else {
				await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
			}
		} catch (error) {
			console.error(error);
		}
});

botNeuroCoder.command("reactnative", async (ctx) => {
	console.log("reactnative");
	await checkAndUpdate(ctx)
	const theme = ctx.message?.text.substring(1)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	if (!theme) {
		await ctx.reply(lang ? "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." : "Theme not found.");
		return;
	}
		try {
			const questionContext = {
				lesson_number: 1,
				subtopic: 1,
			};

			const questions = await getQuestion({
				ctx: questionContext,
				language: theme,
			});
			if (questions.length > 0) {
				const {
					topic: ruTopic,
					image_lesson_url,
					topic_en: enTopic,
					url
				} = questions[0];

				const user_id = await getUid(ctx.from?.username || "");
				if (!user_id) {
					ctx.reply(lang ? "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." : "You are not registered.");
					return;
				}
				const topic = lang ? ruTopic : enTopic;
				const allAnswers = await getCorrects({
					user_id: user_id.toString(),
					language: "all",
				});
				// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				const messageText =
					`${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

				// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
				const inlineKeyboard = [
					[{
						text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
						callback_data: `${theme}_01_01`,
					}],
				];

				if (url && lang) {
					console.log(url, "url");
					await ctx.replyWithVideoNote(url);
				}
				if (image_lesson_url) {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
					await ctx.replyWithPhoto(image_lesson_url || "", {
						caption: messageText,
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				} else {
					await ctx.reply(messageText, {
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				}
			} else {
				await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
			}
		} catch (error) {
			console.error(error);
		}
});

botNeuroCoder.command("python", async (ctx) => {
	console.log("python");
	await checkAndUpdate(ctx)
	const theme = ctx.message?.text.substring(1)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	if (!theme) {
		await ctx.reply(lang ? "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." : "Theme not found.");
		return;
	}
		try {
			const questionContext = {
				lesson_number: 1,
				subtopic: 1,
			};

			const questions = await getQuestion({
				ctx: questionContext,
				language: theme,
			});
			if (questions.length > 0) {
				const {
					topic: ruTopic,
					image_lesson_url,
					topic_en: enTopic,
					url
				} = questions[0];

				const user_id = await getUid(ctx.from?.username || "");
				if (!user_id) {
					ctx.reply(lang ? "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." : "You are not registered.");
					return;
				}
				const topic = lang ? ruTopic : enTopic;
				const allAnswers = await getCorrects({
					user_id: user_id.toString(),
					language: "all",
				});
				// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				const messageText =
					`${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

				// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
				const inlineKeyboard = [
					[{
						text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
						callback_data: `${theme}_01_01`,
					}],
				];

				if (url && lang) {
					console.log(url, "url");
					await ctx.replyWithVideoNote(url);
				}
				if (image_lesson_url) {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
					await ctx.replyWithPhoto(image_lesson_url || "", {
						caption: messageText,
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				} else {
					await ctx.reply(messageText, {
						parse_mode: "HTML",
						reply_markup: { inline_keyboard: inlineKeyboard },
					});
					return;
				}
			} else {
				await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
			}
		} catch (error) {
			console.error(error);
		}
});

botNeuroCoder.command("post", async (ctx) => {
	await checkAndUpdate(ctx)
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const chatId = "-1002228291515";
	const message =
		`<b>–ê–π –ö–æ—â–µ–π ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–µ–π—Ä–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n–†–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ <b>Telegram</b>,  –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π <b>TON (The Open Network)</b> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n\n–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è <b>"–ë–æ—Ä—Ç–æ–≤–æ–π –∂—É—Ä–Ω–∞–ª"</b> ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. \n\n–ù–∞—à–µ –≤–∏–¥–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–µ—á–∏, –Ω–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º.`;
	const message_two =
		`üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω–∞—à–∏—Ö —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø–æ –æ–±—É—á–µ–Ω–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, <b>JavaScript, TypeScript, React, Python –∏ Tact! ü§ñüí°</b>\n\nüîç –ù–∞—à–∏ –±–æ—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Ç–æ–∫–µ–Ω –∑–Ω–∞–Ω–∏–π $IGLA, –ø–æ–≥—Ä—É–∂–∞—è—Å—å –≤ –º–∏—Ä –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —É–≥–ª—É–±–ª—è—è—Å—å –≤ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏. üöÄ\n\nüíº –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–∫–µ—Ä–æ–≤, –Ω–∞—à–∏ –±–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π, –æ–±—É—á–∞—è—Å—å –Ω–∞–≤—ã–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å—è—Ç –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞.\n\nüìö –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏, —Å—Ç–∞–Ω–æ–≤—è—Å—å –±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤ —Å—Ñ–µ—Ä–µ IT!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ <b>–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b>!`;
	const telegram_id = ctx.from?.id;
	if (!telegram_id) throw new Error("No telegram id");
	const chatMember = await botNeuroCoder.api.getChatMember(chatId, telegram_id);
	const isAdmin = chatMember.status === "administrator" ||
		chatMember.status === "creator";
	if (!isAdmin) {
		await ctx.reply(
			lang
				? "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
				: "You do not have admin rights to perform this action.",
		);
		return;
	}

	try {
		await botNeuroCoder.api.sendVideo(chatId, videoUrl(lang), {
			caption: message,
			parse_mode: "HTML",
		});
		await botNeuroCoder.api.sendMessage(chatId, message_two, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [[
					// { text: "Automatization", url: "https://t.me/bot1" },
					{ text: "TypeScript", url: "https://t.me/typescript_dev_bot" },
					{ text: "Python", url: "https://t.me/python_ai_dev_bot" },
				], [{ text: "React", url: "https://t.me/react_native_dev_bot" }, {
					text: "JavaScript",
					url: "https://t.me/javascriptcamp_bot",
				} // { text: "Tact", url: "https://t.me/bot6" },
				], [
					{
						text: "Ai Koshey",
						url: "https://t.me/ai_koshey_bot",
					},
				]],
			},
		});
		await ctx.reply(
			lang
				? "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª."
				: "Message with video sent to the channel.",
		);
	} catch (error) {
		console.error("Failed to send message with video to the channel:", error);
		await ctx.reply(
			lang
				? "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª."
				: "Failed to send message with video to the channel.",
		);
	}
});

botNeuroCoder.command("getchatid", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const chat_id = ctx.message?.chat?.id;
	await ctx.reply(lang ? `üÜî –¢–µ–∫—É—â–∏–π ID —á–∞—Ç–∞: ${chat_id}` : `üÜî Current chatID: ${chat_id}`);
	return
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start"
botNeuroCoder.command("start", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	console.log(ctx.from?.language_code, "ctx.from.language_code")

	const params = ctx?.message?.text && ctx?.message?.text.split(" ")[1];

	const message = ctx.update.message;
	const username = message?.from?.username;
	const telegram_id = message?.from?.id.toString();
	const language_code = message?.from?.language_code;
	if (!ctx.from) throw new Error("User not found");
	console.log(await isRu(ctx), "isRu")
	const lang = await isRu(ctx)

	const isSubscription = await checkSubscription(
		ctx,
		ctx.from?.id,
		mediaChatId(lang)
	);
	if (!isSubscription) {
		await ctx.reply(lang ? "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üëÅ‚Äçüó®" : "You are not subscribed to the channel. To continue the test, you need to subscribe to the channel üëÅ‚Äçüó®",
			{
				reply_markup: { inline_keyboard: [
					[{ text: lang ? "üëÅ‚Äçüó® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" : "üëÅ‚Äçüó® Subscribe", url: lang ? "https://t.me/neuro_coder_ai" : "https://t.me/ai_koshey_en" }],
				] }
				}
			);
			return;
		}

	if(!ctx.from.username) {
		await ctx.reply(lang ? "üîç –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å username" : "üîç To use the bot, you must have a username")
		return
	}

	if (params) {
		const underscoreIndex = params.indexOf("_"); // Search for the index of the first '_'

		if (underscoreIndex !== -1) {
			const select_izbushka = params.substring(0, underscoreIndex); // Extract the part before '_'
			const inviter = await getUsernameByTelegramId(params.substring(underscoreIndex + 1));
			if (!inviter) {
				await ctx.reply(lang ? "–°—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞" : "Invalid link")
				return
			}

			// Check if the selected hut and inviter exist
			if (select_izbushka && inviter) {
				try {
					// Check if the inviter exists
					const { isInviterExist, inviter_user_id, invitation_codes } =
						await checkUsernameCodes(inviter);

					console.log(isInviterExist, "373 isInviterExist")
					if (isInviterExist && invitation_codes) {
						const first_name = message?.from?.first_name;
						const last_name = message?.from?.last_name || "";

						if (username && telegram_id) {
							await ctx.replyWithChatAction("typing");
							// Check if the user exists and create it if it doesn't
							const { isUserExist, user } = await checkAndReturnUser(
								telegram_id,
							);
							console.log(isUserExist, "384 isUserExist")

							if (isUserExist === false || !user?.inviter) {
								console.log(387)
								if (
									first_name && username &&
									message?.from?.id && !user?.inviter &&
										message?.from?.language_code && message?.chat?.id
									) {
										console.log("392")
										const userObj: CreateUserT = {
										id: message?.from?.id,
										username,
										first_name,
										last_name,
										is_bot: message?.from?.is_bot,
										language_code: message?.from?.language_code,
										chat_id: message?.chat?.id,
										inviter: inviter_user_id,
										invitation_codes,
										telegram_id: message?.from?.id,
										select_izbushka,
									};
									await ctx.replyWithChatAction("typing");
									const user = await createUser(userObj);
									console.log(user, "user 407")
									console.log("356 sendMenu");
									await welcomeMenu(ctx);
									return;
								}
							} else {
								const { isUserExist, user } = await checkAndReturnUser(
									telegram_id,
								);
								if (isUserExist && user?.inviter) {
									await ctx.replyWithChatAction("typing");
									await welcomeMenu(ctx);
									return;
								}
							}
						}
					}
				} catch (error) {
					const textError = `${
						lang
							? "ü§î –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
							: "ü§î Something went wrong, try again."
					}\n${JSON.stringify(error)}`;
					await ctx.reply(textError);
					await bugCatcherRequest(
						"neuro-coder",
						JSON.stringify(error),
					);
					return;
				}
			} else {
				if (username && telegram_id) {
					// Check if the user exists and send the corresponding message
					const { isUserExist, user } = await checkAndReturnUser(telegram_id);
					console.log(user, "user");
					if (isUserExist && user?.inviter) {
						console.log("440 sendMenu");
						language_code && await welcomeMenu(ctx);
					} else {
						language_code && await welcomeMessage(ctx);
					}
					return;
				} else {
					const textError = `${
						lang
							? "ü§î –û—à–∏–±–∫–∞: Username not found."
							: "ü§î Error: Username not found."
					}`;
					await ctx.reply(textError);
					throw new Error(textError);
				}
			}
		}
	} else {
		if (username && telegram_id) {
			try {
				const { isUserExist, user } = await checkAndReturnUser(
					telegram_id,
				);

				if (isUserExist && user?.inviter) {
					console.log("465 sendMenu ", user.inviter);
					language_code && await welcomeMenu(ctx);
				} else {
					language_code && await welcomeMessage(ctx);
				}
				return;
			} catch (error) {
				await ctx.reply(
					`${
						lang
							? "ü§î –û—à–∏–±–∫–∞: checkAndReturnUser."
							: "ü§î Error: checkAndReturnUser."
					}\n${error}`,
				);
				await bugCatcherRequest(
					"ai_koshey_bot (select_izbushka && inviter)",
					JSON.stringify(error),
				);
				throw new Error("Error: checkAndReturnUser.");
			}
		}
	}
});

botNeuroCoder.command("buy", async (ctx) => {
	await checkAndUpdate(ctx)
	const lang = await isRu(ctx)
	ctx.reply(lang ? `<b>–ù–µ–π—Ä–æ–°–∞–º - 55 ‚≠êÔ∏è –≤ –º–µ—Å—è—Ü</b>
	
<b>–ù–µ–π—Ä–æ–£—Ä–æ–∫ - 565 ‚≠êÔ∏è –≤ –º–µ—Å—è—Ü</b>
	
<b>–ù–µ–π—Ä–æ–ë–æ—Ç—ã - 5650 ‚≠êÔ∏è –≤ –º–µ—Å—è—Ü</b>`
	 : `<b>NeuroSelf - 55 ‚≠êÔ∏è per month</b>
	 
<b>NeuroLesson - 565 ‚≠êÔ∏è per month</b>

<b>NeuroBots - 5650 ‚≠êÔ∏è per month</b>`, {
		reply_markup: {
			inline_keyboard: [[{ text: lang ? "–ù–µ–π—Ä–æ–°–∞–º" : "NeuroSelf", callback_data: "buy_self" }], [{ text: lang ? "–ù–µ–π—Ä–æ–£—Ä–æ–∫" : "NeuroLesson", callback_data: "buy_lesson" }], [{ text: lang ? "–ù–µ–π—Ä–æ–ë–æ—Ç—ã" : "NeuroBots", callback_data: "buy_bots" }]],
		},
		parse_mode: "HTML",
	})
	return;
});

botNeuroCoder.on("pre_checkout_query", (ctx) => {
	ctx.answerPreCheckoutQuery(true)
	return;
});

botNeuroCoder.on("message:successful_payment", async (ctx) => {
	await checkAndUpdate(ctx)
	const lang = await isRu(ctx)
	console.log("ctx 646(succesful_payment)", ctx)
	const level = ctx.message.successful_payment.invoice_payload
	if (!ctx.from?.username) throw new Error("No username");
	const user_id = await getUid(ctx.from.username)
	if (!user_id) throw new Error("No user_id");
	await sendPaymentInfo(user_id, level)
	const levelForMessage = level === "self" ? lang ? "–ù–µ–π—Ä–æ–°–∞–º" : "NeuroSelf" : level === "lesson" ? lang ? "–ù–µ–π—Ä–æ–£—Ä–æ–∫" : "NeuroLesson" : lang ? "–ù–µ–π—Ä–æ–ë–æ—Ç—ã" : "NeuroBots"
	await ctx.reply(lang ? "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!" : "ü§ù Thank you for the purchase!");
	const textToPost = lang ? `ü™ô @${ctx.from.username} —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É —É—Ä–æ–≤–Ω—è ${levelForMessage}!` : `ü™ô @${ctx.from.username} thank you for the purchase level ${levelForMessage}!`
	await ctx.api.sendMessage(mediaChatId(lang), textToPost)
	return;
});

botNeuroCoder.command("language", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const { user } = await checkAndReturnUser(ctx.from?.id.toString());
	const lang = await isRu(ctx)
	user && ctx.reply(lang ? "üåè –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫" : "üåè Select language", {
		reply_markup: {
			inline_keyboard: [
				[{ text: lang ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá∑üá∫ Russian", callback_data: "select_russian" }],
				[{ text: lang ? "üá¨üáß English" : "üá¨üáß English", callback_data: "select_english" }],
			],
		},
	})
});

botNeuroCoder.command("model", async (ctx) => {
	await checkAndUpdate(ctx)
	console.log("model");
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	// await ctx.reply(lang ? "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å water üåä" : "To use this function, you need to purchase the water level üåä")
	await ctx.reply(lang ? "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò" : "üß†Select Model Ai", {
		reply_markup: {
			inline_keyboard: [
				[{ text: "GPT-4", callback_data: "model_gpt-4" }, { text: "GPT-4o", callback_data: "model_gpt-4o" }, { text: "GPT-4-turbo", callback_data: "model_gpt-4-turbo"}],
				[{ text: "GPT-3.5-turbo", callback_data: "model_gpt-3.5-turbo"}],
			],
		},
	})
	return
})

botNeuroCoder.command("top", async (ctx) => {
	await checkAndUpdate(ctx)
	console.log("top");
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const top10Users = await getTop10Users();
	console.log(top10Users, "top10Users");
	const leaderboardText = top10Users.map((user, index) => {
		return `${index + 1}. ${user.username} - ${user.all} $IGLA`;
	}).join('\n');

	await ctx.reply(lang ? `–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n${leaderboardText}` : `Top 10 users:\n${leaderboardText}`);
	return
})

botNeuroCoder.on("message:text", async (ctx: Context) => {
	await checkAndUpdate(ctx)
	if (ctx.message?.text?.startsWith("/")) return;
	await ctx.replyWithChatAction("typing");
	const inviter = ctx?.message?.text;
	const message = ctx.update.message;
	const language_code = message?.from?.language_code;

	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)

	// Check if the message is a reply (if there is a reply_to_message)
	if (ctx?.message?.reply_to_message) {
		// Check if the original message text contains a specific text
		const originalMessageText = ctx?.message?.reply_to_message?.caption
			? ctx?.message?.reply_to_message?.caption
			: ctx?.message?.reply_to_message?.text;

		console.log(originalMessageText, "originalMessageText");
		if (
			originalMessageText || originalMessageText &&
				(originalMessageText.includes("üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å") ||
					originalMessageText.includes("üè∞ Welcome") ||
					originalMessageText.includes("üîí Oh, my apologies!") ||
					originalMessageText.includes("üîí –û—Ö, —É–≤—ã –∏ –∞—Ö!"))
		) {
			try {
				const { isInviterExist, inviter_user_id } = await checkUsernameCodes(
					inviter as string,
				);

				if (isInviterExist) {
					console.log(message, "message");
					const user = {
						id: message?.from?.id,
						username: message?.from?.username,
						first_name: message?.from?.first_name,
						last_name: message?.from?.last_name,
						is_bot: message?.from?.is_bot,
						language_code,
						chat_id: message?.chat?.id,
						inviter: inviter_user_id,
						invitation_codes: "",
						telegram_id: message?.from?.id,
					};
					console.log(user, "user");
					const newUser = await createUser(user);
					await ctx.replyWithChatAction("typing");

					if (newUser) {
						await ctx.replyWithVideo(videoUrl(lang), {
							caption: await intro(ctx),
							reply_markup: {
								inline_keyboard: await menuButton(ctx),
							},
						});
					}
					return;
				} else {
					await ctx.reply(await textError(ctx), {
						reply_markup: {
							force_reply: true,
						},
					});
					return;
				}
			} catch (error) {
				console.error(error);
			}
		} else {
			console.log("else!!!");
			return;
		}
	} else {
		await ctx.replyWithChatAction("typing");
		if (ctx.message?.text?.startsWith("/")) return;
		const query = ctx?.message?.text;

		const {isUserExist} = await checkAndReturnUser(ctx.from.id.toString())
		if (!isUserExist) {
			await ctx.reply(await textError(ctx), {
				reply_markup: {
					force_reply: true,
				},
			});
			return;
		}
		
		const username = ctx?.update?.message?.from?.username;

		if (!username || !language_code) return;
		  
		const model = await getModel(ctx.from.id.toString())
		console.log(model, "model");

		if (!model) throw new Error("Model not found")
		if (!query) throw new Error("Query not found")

		const language = lang ? "ru" : "en"
		if (!language) throw new Error("Language not found")
		const answer = await answerAi(query, language, model)
		if (!answer) throw new Error("Answer not found")

		await ctx.reply(answer, {parse_mode: "Markdown"})
	
}
	return
});

botNeuroCoder.on("callback_query:data", async (ctx) => {
	await checkAndUpdate(ctx)
	await ctx.replyWithChatAction("typing");
	if (!ctx.from) throw new Error("User not found");
	const lang = await isRu(ctx)
	const callbackData = ctx.callbackQuery.data;

	const telegram_id = ctx.callbackQuery.from.id.toString();

	await ctx.replyWithChatAction("typing");
	console.log(ctx);
	const isHaveAnswer = callbackData.split("_").length === 4;

	if (callbackData.startsWith("buy")) {
		if (callbackData.endsWith("self")) {
			await ctx.replyWithInvoice(
				lang ? "–ù–µ–π—Ä–æ–°–∞–º" : "NeuroSelf",
				lang ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ù–µ–π—Ä–æ–°–∞–º'" : "You will receive a subscription to the 'NeuroSelf' level",
				"self",
				"",
				"XTR",
				[{ label: "–¶–µ–Ω–∞", amount: 55 }],
			);
			return
		}
		if (callbackData.endsWith("lesson")) {
			await ctx.replyWithInvoice(
				lang ? "–ù–µ–π—Ä–æ–£—Ä–æ–∫" : "NeuroLesson",
				lang ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ù–µ–π—Ä–æ–£—Ä–æ–∫'" : "You will receive a subscription to the 'NeuroLesson' level",
				"lesson",
				"",	
				"XTR",
				[{ label: "–¶–µ–Ω–∞", amount: 565 }],
			);
			return
		}
		if (callbackData.endsWith("bots")) {
			await ctx.replyWithInvoice(
				lang ? "–ù–µ–π—Ä–æ–ë–æ—Ç—ã" : "NeuroBots",
				lang ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ù–µ–π—Ä–æ–ë–æ—Ç—ã'" : "You will receive a subscription to the 'NeuroBots' level",
				"bots",
				"",
				"XTR",
				[{ label: "–¶–µ–Ω–∞", amount: 5650 }],
			);
			return
		}
	}
	if (callbackData === "select_russian") {
		await setLanguage(ctx.from?.id.toString(), "ru");
		await ctx.reply("üá∑üá∫ –í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π");
	}
	if (callbackData === "select_english") {
		await setLanguage(ctx.from?.id.toString(), "en");
		await ctx.reply("üá¨üáß English selected");
	}

	if (
		callbackData.startsWith("start_test") ||
		callbackData.startsWith("automation") ||
		callbackData.startsWith("javascript") ||
		callbackData.startsWith("python") ||
		callbackData.startsWith("typescript") ||
		callbackData.startsWith("reactnative")
	) {
		if (callbackData === "start_test") {
			try {
				const theme = callbackData.split("_")[1]
				console.log(`start_test`)
				const questionContext = {
					lesson_number: 1,
					subtopic: 1,
				};

				const questions = await getQuestion({
					ctx: questionContext,
					language: theme,
				});
				if (questions.length > 0) {
					const {
						topic: ruTopic,
						image_lesson_url,
						topic_en: enTopic,
					} = questions[0];

					const user_id = await getUid(ctx.callbackQuery.from.username || "");
					if (!user_id) {
						await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
						return;
					}
					const topic = lang ? ruTopic : enTopic;
					const allAnswers = await getCorrects({
						user_id: user_id.toString(),
						language: "all",
					});
					// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
					const messageText =
						`${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

					// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
					const inlineKeyboard = [
						[{
							text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
							callback_data: `${theme}_01_01`,
						}],
					];

					if (image_lesson_url) {
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
						await ctx.replyWithPhoto(image_lesson_url || "", {
							caption: messageText,
							parse_mode: "HTML",
							reply_markup: { inline_keyboard: inlineKeyboard },
						});
						return;
					} else {
						await ctx.reply(messageText, {
							parse_mode: "HTML",
							reply_markup: { inline_keyboard: inlineKeyboard },
						});
						return;
					}
				} else {
					await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
				}
			} catch (error) {
				console.error(error);
			}
		}

		if (!isHaveAnswer) {
			try {
				const [language, lesson, subtopic] = callbackData.split("_");
				let questions;
				if (!isNaN(Number(lesson)) && !isNaN(Number(subtopic))) {
					// –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.
					const getQuestionContext = {
						lesson_number: Number(lesson),
						subtopic: Number(subtopic),
					};
					questions = await getQuestion({
						ctx: getQuestionContext,
						language,
					});
				} else {
					// –û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
					console.error(
						"–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(96):",
						lesson,
						subtopic,
						callbackData,
					);
					await ctx.reply(
						lang
							? "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ."
							: "One of the values is incorrect. Please check the data.",
					);
					return;
				}
				const {
					question: ruQuestion,
					variant_0: ruVariant_0,
					variant_1: ruVariant_1,
					variant_2: ruVariant_2,
					question_en: enQuestion,
					variant_0_en: enVariant_0,
					variant_1_en: enVariant_1,
					variant_2_en: enVariant_2,
					id,
					image_lesson_url,
				} = questions[0];

				const question = lang ? ruQuestion : enQuestion;
				const variant_0 = lang ? ruVariant_0 : enVariant_0;
				const variant_1 = lang ? ruVariant_1 : enVariant_1;
				const variant_2 = lang ? ruVariant_2 : enVariant_2;

				const user_id = await getUid(ctx.callbackQuery.from.username || "");
				if (!user_id) {
					await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
					return;
				}
				console.log(user_id);
				const allAnswers = await getCorrects({
					user_id: user_id.toString(),
					language: "all",
				});
				// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				const messageText =
					`<b>‚Ññ${id}</b>\n\n${question}\n\n<b> Total: ${allAnswers} $IGLA</b>`;

				// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
				const inlineKeyboard = [
					[{
						text: variant_0 || "Variant 1",
						callback_data: `${callbackData}_0`,
					}],
					[{
						text: variant_1 || "Variant 2",
						callback_data: `${callbackData}_1`,
					}],
					[{
						text: variant_2 || (lang ? "–ù–µ –∑–Ω–∞—é" : "I don't know"),
						callback_data: `${callbackData}_2`,
					}],
				];

				if (image_lesson_url) {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
					await ctx.editMessageCaption({
						reply_markup: { inline_keyboard: inlineKeyboard },
						caption: messageText,
						parse_mode: "HTML",
					});
				} else {
					await ctx.editMessageText(messageText, {
						reply_markup: { inline_keyboard: inlineKeyboard },
						parse_mode: "HTML",
					});
				}
			} catch (error) {
				console.error(error);
			}
		}

		if (isHaveAnswer) {
			try {
				if (ctx.callbackQuery.from.id) {
					console.log("editMessageReplyMarkup")
					await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
				}
				const [language, lesson_number, subtopic, answer] = callbackData.split(
					"_",
				);
				const questionContext = {
					lesson_number: Number(lesson_number),
					subtopic: Number(subtopic),
				};

				const questions = await getQuestion({ ctx: questionContext, language });
				if (questions.length > 0) {
					const {
						correct_option_id,
					} = questions[0];
					const user_id = await getUid(ctx.callbackQuery.from.username || "");
					if (!user_id) {
						await ctx.reply(lang ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." : "User not found.");
						return;
					}

					const path = `${language}_${lesson_number}_${subtopic}`;
					console.log(path, "path for getBiggest");
					const biggestSubtopic = await getBiggest({
						lesson_number: Number(lesson_number),
						language,
					});

					let isTrueAnswer = null;
					if (Number(correct_option_id) === Number(answer)) {
						isTrueAnswer = true;
						await ctx.reply("‚úÖ");
					} else {
						isTrueAnswer = false;
						await ctx.reply("‚ùå");
					}
					await updateProgress({
						user_id: user_id.toString(),
						isTrue: isTrueAnswer,
						language,
					});
					console.log(biggestSubtopic, `biggestSubtopic`);
					console.log(subtopic, `subtopic`);
					const newPath = await pathIncrement({
						path,
						isSubtopic: Number(biggestSubtopic) === Number(subtopic)
							? false
							: true,
					});
					const correctAnswers = await getCorrects({
						user_id: user_id.toString(),
						language,
					});
					const allAnswers = await getCorrects({
						user_id: user_id.toString(),
						language: "all",
					});

					const lastCallbackId = await getLastCallback(language);
					console.log(lastCallbackId);
					if (lastCallbackId) {
						if (questions[0].id === lastCallbackId) {
							const correctProcent = (correctAnswers / lastCallbackId) * 100;
							if (correctProcent >= 80) {
								await updateResult({
									user_id: user_id.toString(),
									language,
									value: true,
								});
								await ctx.reply(
									lang
										? `<b>ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç! –î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Ç –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.</b>\n\n Total: ${allAnswers} $IGLA`
										: `<b>ü•≥ Congratulations, you passed the main test! Then you can pass the additional tests from the artificial intelligence.</b>\n\n Total: ${allAnswers} $IGLA`,
									{ parse_mode: "HTML" },
								);
							} else {
								await updateResult({
									user_id: user_id.toString(),
									language,
									value: false,
								});
								await ctx.reply(
									lang
										? `<b>ü•≤ –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! </b>\n\n Total: ${allAnswers} $IGLA`
										: `<b>ü•≤ You didn't pass the main test, but that won't stop you from developing!</b>\n\n Total: ${allAnswers} $IGLA`,
									{ parse_mode: "HTML" },
								);
							}
						}
						console.log(newPath, `newPath ai koshey`);
						const [newLanguage, newLesson, newSubtopic] = newPath.split("_");
						const getQuestionContext = {
							lesson_number: Number(newLesson),
							subtopic: Number(newSubtopic),
						};
						const newQuestions = await getQuestion({
							ctx: getQuestionContext,
							language,
						});
						console.log(newQuestions, `newQuestions ai koshey for`);
						console.log(getQuestionContext, `getQuestionContext`);
						const { topic: ruTopic, image_lesson_url, topic_en: enTopic, url } =
							newQuestions[0];
						const topic = lang ? ruTopic : enTopic;
						// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
						const messageText =
							`${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

						// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
						const inlineKeyboard = [
							[{
								text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
								callback_data: newPath,
							}],
						];
						if (url && lang) {
							console.log(url, "url");
							await ctx.replyWithVideoNote(url);
						}
						if (image_lesson_url) {
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
							await ctx.replyWithPhoto(image_lesson_url, {
								caption: messageText,
								parse_mode: "HTML",
								reply_markup: { inline_keyboard: inlineKeyboard },
							});
							return;
						} else {
							await ctx.reply(messageText, {
								parse_mode: "HTML",
								reply_markup: { inline_keyboard: inlineKeyboard },
							});
							return;
						}
					} else {
						await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
					}
				} else {
					console.error("Invalid callback(289)");
					return;
				}
			} catch (error) {
				console.error(error);
			}
		}
	}
	if (callbackData.startsWith("create_soul")) {
		if (ctx.callbackQuery.from.id) {
			console.log("editMessageReplyMarkup")
			await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
		}
		await ctx.reply(
			lang
				? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:"
				: "Please, specify your company name:",
			{ reply_markup: { force_reply: true } },
		);
		return;
	}

	if (callbackData.startsWith("create_digital_avatar")) {
		if (ctx.callbackQuery.from.id) {
			console.log("editMessageReplyMarkup")
			await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
		}
		await ctx.reply(
			lang
				? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ video_id:"
				: "Please, specify your video_id:",
			{ reply_markup: { force_reply: true } },
		);
		return;
	}

	if (callbackData.startsWith("model_")) {
		const model = callbackData.split("_")[1];
		console.log(model, "model");
		await setModel(telegram_id, model);
		await ctx.reply(lang ? `üîã –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å ${model}` : `üîã You selected the model ${model}`);
		return;
	}

return
});

await botNeuroCoder.api.setMyCommands([
	{
		command: "/start",
		description: "üöÄ Start chatting with",
	},
	{
		command: "/neuro",
		description: "üß† Start the neuro course",
	},
	{
		command: "/javascript",
		description: "üíª Learn JavaScript",
	},
	{
		command: "/typescript",
		description: "üíª Learn TypeScript",
	},
	{
		command: "/reactnative",
		description: "üì± Learn React Native",
	},
	{
		command: "/python",
		description: "üêç Learn Python",
	},
	{
		command: "/language",
		description: "üåê Select language",
	},
	{
		command: "/model",
		description: "üß† Add avatar's model",
	},
	{
		command: "/top",
		description: "üèÜ Top 10 users",
	},
	{
		command: "/buy",
		description: "üõí Buy subscription",
	},
	{
		command: "/getchatid",
		description: "üÜî Get chat ID",
	},
]);

botNeuroCoder.catch((err) => {
	const ctx = err.ctx;
	console.error(`Error while handling update ${ctx.update.update_id}:`);
	const e = err.error;
	if (e instanceof GrammyError) {
		console.error("Error in request:", e.description);
	} else if (e instanceof HttpError) {
		console.error("Could not contact Telegram:", e);
		throw e;
	} else {
		console.error("Unknown error:", e);
		throw e;
	}
});

Deno.serve(async (req) => {
	try {
		const url = new URL(req.url);
		if (url.searchParams.get("secret") !== Deno.env.get("FUNCTION_SECRET")) {
			return new Response("not allowed", { status: 405 });
		}

		return await handleUpdateNeuroCoder(req);
	} catch (err) {
		console.error(err);
	}
});

// supabase functions deploy neuro-coder --no-verify-jwt
