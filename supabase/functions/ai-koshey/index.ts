console.log(`Function "ai_kochey_bot" up and running!`);

import {
  Context,
  GrammyError,
  HttpError,
} from "https://deno.land/x/grammy@v1.8.3/mod.ts";

import { getAiFeedbackFromSupabase } from "../get-ai-feedback.ts";
import { delay, FUNCTION_SECRET } from "../_shared/utils/constants.ts";
import { createUser } from "../_shared/utils/nextapi/index.ts";
import {
  aiKosheyUrl,
  botAiKoshey,
  botUsername,
  handleUpdateAiKoshey,
} from "../_shared/utils/telegram/bots.ts";
import {
  checkAndReturnUser,
  checkUsernameCodes,
  setSelectedIzbushka,
} from "../_shared/utils/supabase/users.ts";
import {
  getRooms,
  getRoomsCopperPipes,
  getRoomsWater,
  getSelectIzbushkaId,
} from "../_shared/utils/supabase/rooms.ts";
import {
  checkPassportByRoomId,
  setPassport,
} from "../_shared/utils/supabase/passport.ts";
import { PassportUser, RoomNode } from "../_shared/utils/types/index.ts";
import { SUPABASE_URL } from "../_shared/utils/supabase/index.ts";

export type CreateUserT = {
  id: number;
  username: string;
  first_name: string;
  last_name: string;
  is_bot: boolean;
  language_code: string;
  chat_id: number;
  inviter: string;
  invitation_codes?: string;
  telegram_id: number;
  select_izbushka: string;
};

const startIzbushka = async (ctx: Context) => {
  await ctx.reply(
    `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "Izbushka", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.`,
  );
  return;
};

const welcomeMenu = async (ctx: Context) => {
  await ctx.reply(
    `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞–ª–µ–≤–æ –ø–æ–π–¥–µ—à—å - –æ–≥–Ω–µ–º —Å–æ–≥—Ä–µ–µ—à—å—Å—è, –ø—Ä—è–º–æ –ø–æ–π–¥–µ—à—å - –≤ –≤–æ–¥–∏—á–∫–µ –æ–º–æ–ª–æ–¥–∏—à—å—Å—è, –∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ–π–¥–µ—à—å - –≤ –º–µ–¥–Ω—É—é —Ç—Ä—É–±—É –ø–æ–ø–∞–¥–µ—à—å.`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üî• –û–≥–æ–Ω—å",
              callback_data: "fire",
            },
            {
              text: "üíß –í–æ–¥–∞",
              callback_data: "water",
            },
            {
              text: "üé∫ –ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã",
              callback_data: "copper_pipes",
            },
          ],
        ],
      },
    },
  );
  return;
};

const welcomeMessage = async (ctx: Context) => {
  await ctx.reply(
    `üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ, ${ctx?.update?.message?.from?.first_name}! \n–í—Å–µ–º–æ–≥—É—â–∞—è –ë–∞–±–∞ –Ø–≥–∞, –≤–ª–∞–¥—ã—á–∏—Ü–∞ —Ç–∞–π–Ω –∏ —á–∞—Ä–æ–¥–µ–π–Ω–∏—Ü–∞, –ø—Ä–µ–¥ –≤—Ä–∞—Ç–∞ –Ω–µ–≤–µ–¥–æ–º–æ–≥–æ –º–∏—Ä–∞ —Ç–µ–±—è –ø—Ä–∏–≤–µ—á–∞–µ—Ç.\n–ß—Ç–æ–± –∏–∑–±–∞ –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∫–æ–º –æ–±–µ—Ä–Ω—É–ª–∞—Å—å, –∞ –Ω–µ –∑–∞–¥–æ–º —Å—Ç–æ—è–ª–∞, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ—à–µ–ø—Ç–∞—Ç—å –∫–∞–±—ã —Å–ª–æ–≤–µ—á–∫–æ-–ø—Ä–æ—Ö–æ–¥–Ω–æ–µ.`,
    {
      reply_markup: {
        force_reply: true,
      },
    },
  );
  return;
};

const intro = ({ language_code = "en" }: { language_code?: string }) => {
  const intro = language_code === "ru"
    ? `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞ –ª–µ–≤–æ –ø–æ–π–¥–µ—à—å –æ–≥–æ–Ω–µ–º —Å–æ–≥—Ä–µ–µ—à—å—Å—è, –ø—Ä—è–º–æ –ø–æ–π–¥–µ—à—å –≤ –≤–æ–¥–∏—á–∫–µ –æ–º–æ–ª–æ–¥–∏—à—å—Å—è, –∞ –Ω–∞ –ø—Ä–∞–≤–æ –ø–æ–π–¥–µ—à—å –≤ –º–µ–¥–Ω—É—é —Ç—Ä—É–±—É –ø–æ–ø–∞–¥–µ—à—å.`
    : `üè∞ The hut turned its front to you, and its back to the forest. If you go to the left you will be warmed by the fire, you will go straight ahead in the water and you will rejuvenate, and to the right you will go into a copper pipe.
`;
  return intro;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start"
botAiKoshey.command("start", async (ctx: Context) => {
  console.log("start"); // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è "start"
  await ctx.replyWithChatAction("typing"); // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const params = ctx?.message?.text && ctx?.message?.text.split(" ")[1];
  console.log(params, "params");
  const message = ctx.update.message;
  const username = message?.from?.username;

  if (params) {
    const underscoreIndex = params.indexOf("_"); // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ '_'
    if (underscoreIndex !== -1) {
      const select_izbushka = params.substring(0, underscoreIndex); // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –¥–æ '_'
      const inviter = params.substring(underscoreIndex + 1); // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ '_'

      console.log(select_izbushka, "select_izbushka"); // –í—ã–≤–æ–¥–∏—Ç "100"
      console.log(inviter, "inviter"); // –í—ã–≤–æ–¥–∏—Ç "ai_koshey_more"

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–∑–±—É—à–∫–∏ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (select_izbushka && inviter) {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { isInviterExist, inviter_user_id, invitation_codes } =
            await checkUsernameCodes(inviter);

          if (isInviterExist && invitation_codes) {
            console.log(isInviterExist, "isInviterExist");

            const first_name = message?.from?.first_name;
            const last_name = message?.from?.last_name;

            if (username) {
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–≥–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

              const { isUserExist } = await checkAndReturnUser(
                username,
              );
              console.log(isUserExist, "isUserExist"); // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

              if (!isUserExist) {
                console.log("!isUserExist");
                console.log(
                  first_name,
                  last_name,
                  username,
                  message?.from?.id,
                  message?.from?.is_bot,
                  message?.from?.language_code,
                  message?.chat?.id,
                );
                if (
                  first_name && last_name && username &&
                  message?.from?.id &&
                  message?.from?.language_code && message?.chat?.id
                ) {
                  const userObj: CreateUserT = {
                    id: message?.from?.id,
                    username,
                    first_name,
                    last_name,
                    is_bot: message?.from?.is_bot,
                    language_code: message?.from?.language_code,
                    chat_id: message?.chat?.id,
                    inviter: inviter_user_id,
                    invitation_codes,
                    telegram_id: message?.from?.id,
                    select_izbushka,
                  };
                  console.log(userObj, "userObj");
                  const newUser = await createUser(userObj);
                  console.log(newUser, "newUser");

                  await welcomeMenu(ctx);
                  return;
                }
              } else {
                const { isUserExist, user } = await checkAndReturnUser(
                  username,
                );
                if (isUserExist) {
                  console.log(select_izbushka, "select_izbushka");
                  const { izbushka } = await getSelectIzbushkaId(
                    select_izbushka,
                  );
                  console.log(izbushka, "izbushka");
                  if (
                    izbushka && user && first_name && last_name &&
                    user.telegram_id && izbushka.workspace_id
                  ) {
                    const passport_user: PassportUser = {
                      user_id: user.user_id,
                      workspace_id: izbushka.workspace_id,
                      room_id: izbushka.room_id,
                      username,
                      first_name,
                      last_name,
                      chat_id: user.telegram_id,
                      type: "room",
                      is_owner: false,
                      photo_url: user.photo_url || null,
                    };
                    console.log(passport_user, "passport_user");

                    // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É —é–∑–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç –∫ —ç—Ç–æ–π –∏–∑–±—É—à–∫–µ –∏ –Ω–µ –≤—ã–¥–æ–≤–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                    console.log(user.user_id, "user.user_id");
                    console.log(izbushka.room_id, "izbushka.room_id");
                    const isPassportExist = await checkPassportByRoomId(
                      user.user_id,
                      izbushka.room_id,
                      "room",
                    );
                    console.log(isPassportExist, "isPassportExist");
                    if (!isPassportExist) {
                      await setPassport(passport_user);
                    }

                    if (select_izbushka && username) {
                      await setSelectedIzbushka(
                        username,
                        select_izbushka,
                      );
                    }
                    await startIzbushka(ctx);
                  } else {
                    await ctx.reply(
                      `ü§î Error: getSelectIzbushkaId.\n${izbushka}`,
                    );
                    throw new Error("Error: getSelectIzbushkaId.");
                  }
                  return;
                }
              }
            }
          }
        } catch (error) {
          await ctx.reply(
            `ü§î –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n${error}`,
          );
          return;
        }
      } else {
        if (username) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          const { isUserExist } = await checkAndReturnUser(username);
          console.log(isUserExist, "else isUserExist");
          if (isUserExist) {
            await welcomeMenu(ctx); // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
          } else {
            await welcomeMessage(ctx); // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          }
          return;
        }
      }
    }
  } else {
    if (username) {
      try {
        const { isUserExist } = await checkAndReturnUser(
          username,
        );

        if (isUserExist) {
          console.log("isUserExist");
          await welcomeMenu(ctx);
        } else {
          console.log("NotUserExist");
          await welcomeMessage(ctx);
        }
        return;
      } catch (error) {
        await ctx.reply(`ü§î Error: checkAndReturnUser.\n${error}`);
        throw new Error("Error: checkAndReturnUser.");
      }
    }
  }
});

botAiKoshey.on("message:text", async (ctx: Context) => {
  await ctx.replyWithChatAction("typing");
  const inviter = ctx?.message?.text;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º (–µ—Å—Ç—å –ª–∏ reply_to_message)
  if (ctx?.message?.reply_to_message) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalMessageText = ctx?.message?.reply_to_message?.text;
    console.log(originalMessageText, "originalMessageText");
    if (
      originalMessageText &&
      (originalMessageText.includes("üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å") ||
        originalMessageText.includes("üîí –û—Ö, —É–≤—ã –∏ –∞—Ö!"))
    ) {
      try {
        const { isInviterExist, inviter_user_id } = await checkUsernameCodes(
          inviter as string,
        );

        if (isInviterExist) {
          const message = ctx.update.message;
          const language_code = message?.from?.language_code;
          const user = {
            id: message?.from?.id,
            username: message?.from?.username,
            first_name: message?.from?.first_name,
            last_name: message?.from?.last_name,
            is_bot: message?.from?.is_bot,
            language_code,
            chat_id: message?.chat?.id,
            inviter: inviter_user_id,
            invitation_codes: "",
            telegram_id: message?.from?.id,
          };
          const newUser = await createUser(user);
          await ctx.replyWithChatAction("typing");
          newUser && await ctx.reply(
            intro({ language_code }),
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "üî• –û–≥–æ–Ω—å",
                      callback_data: "fire",
                    },
                    {
                      text: "üé∫ –ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã",
                      callback_data: "copper_pipes",
                    },
                    {
                      text: "üíß –í–æ–¥–∞",
                      callback_data: "water",
                    },
                  ],
                ],
              },
            },
          );
          return;
        } else {
          await ctx.reply(
            `üîí –û—Ö, —É–≤—ã –∏ –∞—Ö! –°–ª–æ–≤–µ—á–∫–æ, —á—Ç–æ –¥–æ –º–µ–Ω—è –¥–æ—à–ª–æ, —á–∞—Ä–∞–º —Ç–∞–π–Ω—ã–º –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ—à—É, –¥–∞–π –∑–Ω–∞—Ç—å –∏–Ω–æ–µ, —á—Ç–æ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º, —á—Ç–æ–± –ø—É—Ç—å —Ç–≤–æ–π –≤ —Ü–∞—Ä—Å—Ç–≤–æ –¥–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—É–º–µ–ª–∏ –±–µ–∑ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è.`,
            {
              reply_markup: {
                force_reply: true,
              },
            },
          );
          return;
        }
      } catch (error) {
        console.error(error);
      }
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª
    } else {
      // const query = ctx?.message?.text;
      // console.log(query, "query");
      // try {
      //   if (query && aiKosheyUrl) {
      //     const endpoint =
      //       `${SUPABASE_URL}/functions/v1/ask-data?secret=${FUNCTION_SECRET}`;

      //     const { content } = await getAiFeedbackFromSupabase({
      //       query,
      //       endpoint: endpoint,
      //     });
      //     console.log(content, "content");
      //     await ctx.reply(content, { parse_mode: "Markdown" });
      //     return;
      //   }
      // } catch (error) {
      //   console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:", error);
      //   return;
      // }
      return;
    }
  } else {
    await ctx.replyWithChatAction("typing");
    const query = ctx?.message?.text;
    console.log(query, "query");
    try {
      if (query && aiKosheyUrl) {
        try {
          if (query && aiKosheyUrl) {
            const endpoint =
              `${SUPABASE_URL}/functions/v1/ask-data?secret=${FUNCTION_SECRET}`;

            const { content } = await getAiFeedbackFromSupabase({
              query,
              endpoint: endpoint,
            });
            console.log(content, "content");
            await ctx.reply(content, { parse_mode: "Markdown" });
            return;
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:", error);
          return;
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:", error);
      return;
    }
    return;
  }
});

botAiKoshey.on("callback_query:data", async (ctx) => {
  console.log(ctx.callbackQuery, "callback_query");
  await ctx.replyWithChatAction("typing");

  const callbackData = ctx.callbackQuery.data;

  const username = ctx.update && ctx.update.callback_query.from.username;

  const handleRoomSelection = async (
    ctx: Context,
    rooms: RoomNode[],
    type: string,
  ) => {
    console.log(callbackData, "callbackData");
    try {
      if (rooms && rooms.length > 0) {
        console.log(rooms, " handleRoomSelection rooms");
        const keyboard = rooms
          .filter((room: RoomNode) => room)
          .map((room: RoomNode) => ({
            text: room.name,
            callback_data: `select_izbushka_${room.id}`,
          }))
          .reduce(
            (
              acc: { text: string; callback_data: string }[][],
              curr: { text: string; callback_data: string },
              index: number,
            ) => {
              const row = Math.floor(index / 1);
              acc[row] = acc[row] || [];
              acc[row].push(curr);
              return acc;
            },
            [],
          );
        console.log(keyboard, "keyboard");
        await ctx.replyWithChatAction("typing");
        if (type === "fire") {
          await ctx.reply(
            "üî• –ü–ª–∞–º—è –≥–æ—Ä—è—á–µ–µ - —ç—Ç–æ –ª–∏—á–Ω—ã–µ –∏–∑–±—É—à–∫–∏, –≥–¥–µ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –ø–∏—à—É—Ç—Å—è –∏ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è.",
            {
              reply_markup: { inline_keyboard: keyboard },
            },
          );
          return;
        } else if (type === "water") {
          await ctx.reply(
            "üíß –í–æ–¥—ã —á–∏—Å—Ç—ã–µ –∫ —Å–µ–±–µ –º–∞–Ω—è—Ç, –≥–¥–µ –≥–æ—Å—Ç—å —Ç—ã –≤ –∏–∑–±—É—à–∫–∞—Ö –¥–æ—Ä–æ–≥–æ–π.\n\n–ó–¥–µ—Å—å –∏–∑–±—É—à–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.",
            {
              reply_markup: { inline_keyboard: keyboard },
            },
          );
          return;
        } else if (type === "copper_pipes") {
          await ctx.reply(
            "üé∫ –ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã - —ç—Ç–æ —á–∞—Ä–æ–¥–µ–π—Å–∫–∏–µ –∏–∑–±—É—à–∫–∏, –≥–¥–µ –æ–±—É—á–µ–Ω–∏–µ –∫ –º—É–¥—Ä–æ—Å—Ç–∏ —Ç–µ–±—è –≤–µ–¥–µ—Ç.",
            {
              reply_markup: { inline_keyboard: keyboard },
            },
          );
          return;
        }
        return;
      } else {
        await ctx.reply(`–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—É—à–µ–∫ –∫—É–¥–∞ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏`);
        return;
      }
    } catch (error) {
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–±—É—à–∫–∏`, error);
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–±—É—à–∫–∏");
    }
  };

  if (callbackData === "fire") {
    const rooms = username && (await getRooms(username));
    console.log(rooms, "rooms fire");
    rooms && await handleRoomSelection(ctx, rooms, "fire");
  } else if (callbackData === "water") {
    const rooms = username && (await getRoomsWater(username));
    console.log(rooms, "rooms waters");
    rooms && await handleRoomSelection(ctx, rooms, "water");
  } else if (callbackData === "copper_pipes") {
    const rooms = await getRoomsCopperPipes();
    console.log(rooms, "rooms copper_pipes");
    rooms && await handleRoomSelection(ctx, rooms, "copper_pipes");
  }

  if (callbackData === "name_izbushka") {
    try {
      await ctx.reply("–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –∏–∑–±—É—à–∫—É?", {
        reply_markup: {
          force_reply: true,
        },
      });
      return;
    } catch (error) {
      console.error(error);
    }
  }

  if (callbackData === "show_izbushka") {
    const rooms = username && (await getRooms(username));
    // console.log(rooms, "rooms");
    try {
      if (Array.isArray(rooms)) {
        await ctx.reply("üè° –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–±—É—à–∫—É", {
          reply_markup: {
            inline_keyboard: rooms
              .filter((room: RoomNode) => room)
              .map((room: RoomNode) => ({
                text: room.name,
                callback_data: `select_izbushka_${room.id}`,
              }))
              .reduce(
                (
                  acc: { text: string; callback_data: string }[][],
                  curr,
                  index,
                ) => {
                  const row = Math.floor(index / 1);
                  acc[row] = acc[row] || [];
                  acc[row].push(curr);
                  return acc;
                },
                [],
              ),
          },
        });
      } else {
        await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—É—à–∫–∏.");
      }
      return;
    } catch (error) {
      console.error("error show_izbushka", error);
      return;
    }
  }

  if (callbackData.includes("select_izbushka")) {
    const select_izbushka = callbackData.split("_")[2];
    console.log(select_izbushka, "select_izbushka");
    if (select_izbushka) {
      username && await setSelectedIzbushka(username, select_izbushka);
    }

    await ctx.reply(
      `üì∫ –ß—Ç–æ –∂, –ø—É—Ç–Ω–∏–∫ –¥–æ—Ä–æ–≥–æ–π, –¥–∞–±—ã —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "Izbushka" —Å–º–µ–ª–µ–µ –∏ –≤–µ—Å–µ–ª–∏—Å—å, –∏–±–æ –≤—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –Ω–∞—á–∞–ª—É —Ç–≤–æ–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ —Ü–∏—Ñ—Ä–æ–≤—ã–º –ø—Ä–æ—Å—Ç–æ—Ä–∞–º!\n\nüåü –ü–æ–¥–µ–ª–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–æ–π —Å —Ç–µ–º, —Å –∫–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤ –ò–∑–±—É—à–∫–µ –Ω–∞ –∫—É—Ä—å–∏—Ö –Ω–æ–∂–∫–∞—Ö —Ö–æ—á–µ—à—å.`,
    );
    await delay(500);
    await ctx.reply(
      `üè∞ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ üè∞\n\n–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!\n\nhttps://t.me/${botUsername}?start=${select_izbushka}_${username}\n\n–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Izbushka", —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤—Å—Ç—Ä–µ—á—É.`,
    );
    return;
  }
});

// botAiKoshey.on("message:text", async (ctx) => {
//   await ctx.replyWithChatAction("typing");
//   const query = ctx?.message?.text;
//   console.log(query, "query");
//   try {
//     if (query && aiKosheyUrl) {
//       const endpoint =
//         `${SUPABASE_URL}/functions/v1/ask-data?secret=${FUNCTION_SECRET}`;
//       console.log(endpoint, "endpoint");
//       const feedback = await getAiFeedbackFromSupabase({
//         query,
//         endpoint: endpoint,
//       });
//       await ctx.reply(feedback, { parse_mode: "Markdown" });
//       return;
//     }
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:", error);
//     return;
//   }
//   return;
// });

await botAiKoshey.api.setMyCommands([
  {
    command: "/start",
    description: "Start chatting with Ai Koshey",
  },
  // {
  //   command: "/room",
  //   description: "Create a room",
  // },
]);

botAiKoshey.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

Deno.serve(async (req) => {
  try {
    const url = new URL(req.url);
    if (url.searchParams.get("secret") !== Deno.env.get("FUNCTION_SECRET")) {
      return new Response("not allowed", { status: 405 });
    }

    return await handleUpdateAiKoshey(req);
  } catch (err) {
    console.error(err);
  }
});

// supabase functions deploy ai-koshey --no-verify-jwt
