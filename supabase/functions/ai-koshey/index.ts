// Setup type definitions for built-in Supabase Runtime APIs
/// <reference types="https://esm.sh/@supabase/functions-js/src/edge-runtime.d.ts" />

import {
  Context,
  GrammyError,
  HttpError,
} from "https://deno.land/x/grammy@v1.8.3/mod.ts";

import { checkSubscription } from "../check-subscription.ts";
import { AI_KOSHEY, delay } from "../_shared/constants.ts";
import { createUser } from "../_shared/nextapi/index.ts";
import {
  AiKosheyContext,
  botAiKoshey,
  botUsername,
  bugCatcherRequest,
  handleUpdateAiKoshey,
} from "../_shared/telegram/bots.ts";
import {
  checkAndReturnUser,
  checkUsernameCodes,
  getLanguage,
  getUid,
  getUsernameByTelegramId,
  setLanguage,
  setSelectedIzbushka,
  updateUser,
} from "../_shared/supabase/users.ts";
import {
  getRooms,
  getRoomsCopperPipes,
  getRoomsWater,
  getSelectIzbushkaId,
} from "../_shared/supabase/rooms.ts";
import {
  checkPassportByRoomId,
  getPassportsTasksByUsername,
  setPassport,
} from "../_shared/supabase/passport.ts";
import { PassportUser, RoomNode } from "../_shared/types/index.ts";
import {
  createVoiceSyncLabs,
  getAiFeedbackFromSupabase,
} from "../_shared/supabase/ai.ts";
import { createVideo } from "../_shared/heygen/index.ts";
import {
  getBiggest,
  getCorrects,
  getLastCallback,
  getQuestion,
  updateProgress,
  updateResult,
  getTop10Users
} from "../_shared/supabase/progress.ts";
import { pathIncrement } from "../path-increment.ts";
import { sendPaymentInfo } from "../_shared/supabase/payments.ts";

export type CreateUserT = {
  id: number;
  username: string;
  first_name: string;
  last_name: string;
  is_bot: boolean;
  language_code: string;
  chat_id: number;
  inviter: string;
  invitation_codes?: string;
  telegram_id: number;
  select_izbushka: string;
};
const isRu = async (ctx: Context) => {
  if (!ctx.from) throw new Error("User not found");
  const language = await getLanguage(ctx.from?.id.toString());
  if (!language) return ctx.from.language_code === "ru"
  return language === "ru";
}

const videoUrl = (isRu: boolean) => isRu ? "https://t.me/dao999nft_storage/5" : "https://t.me/dao999nft_storage/6";

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "avatar"
botAiKoshey.command("avatar", async (ctx) => {
  if (!ctx.from) throw new Error("User not found");
  await ctx.replyWithChatAction("typing");
  const lang = await isRu(ctx)
  await ctx.reply(
    `${lang ? "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç" : "Send text"}`,
    {
      reply_markup: {
        force_reply: true,
      },
    },
  );
  return;
});

const startIzbushka = async (ctx: Context) => {
  const lang = await isRu(ctx)
  try {
    if (!ctx.from) throw new Error("User not found");
    // const text = isRu
    //   ? `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "Izbushka", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.`
    //   : `üè∞ The hut turned its front to you, and its back to the forest. Tap the "Izbushka" button to start the encounter.`;

    const buttons = [
      {
        text: `${lang ? "–í–æ–π—Ç–∏ –≤ –ò–∑–±—É—à–∫—É" : "Enter the room"}`,
        web_app: { url: "https://dao999nft.com/show-izbushka" },
      },
    ];

    const text = lang
      ? `ü§ù –ù–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å —Ç–µ–º, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å`
      : `ü§ù Start the meeting with the person who invited you`;

    await ctx.reply(
      text,
      {
        reply_markup: {
          inline_keyboard: [buttons],
        },
      },
    );
    return;
  } catch (error) {
    await ctx.reply(lang ? "–°—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞" : "Invalid link")
    throw new Error("startIzbushka", error);
  }
};

const textError = async (ctx: Context) => {
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  return `üîí ${
    lang
      ? "–û—Ö, —É–≤—ã –∏ –∞—Ö! –°–ª–æ–≤–µ—á–∫–æ, —á—Ç–æ –¥–æ –º–µ–Ω—è –¥–æ—à–ª–æ, —á–∞—Ä–∞–º —Ç–∞–π–Ω—ã–º –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ—à—É, –¥–∞–π –∑–Ω–∞—Ç—å –∏–Ω–æ–µ, —á—Ç–æ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º, —á—Ç–æ–± –ø—É—Ç—å —Ç–≤–æ–π –≤ —Ü–∞—Ä—Å—Ç–≤–æ –¥–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—É–º–µ–ª–∏ –±–µ–∑ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è.\n\n–õ–∏–±–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ –Ω–∞—à –∫—É—Ä—Å –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /course, –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Ç–æ–∫–µ–Ω $IGLA."
      : "Oh, my apologies! The word that came to me, the secret does not answer. Please, tell me another word that is the key to the right path, so that the path of your life is a strange and open way to the kingdom.\n\nOr you can try to pass our course on the neural networks, using the command /course, and earn our token $IGLA."
  }`;
};

const welcomeMenu = async (ctx: Context) => {
  console.log("‚úÖwelcomeMenu");
  await ctx.replyWithChatAction("upload_video"); // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  const text = lang
    ? `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞–ª–µ–≤–æ –ø–æ–π–¥–µ—à—å - –æ–≥–Ω–µ–º —Å–æ–≥—Ä–µ–µ—à—å—Å—è, –ø—Ä—è–º–æ –ø–æ–π–¥–µ—à—å - –≤ –≤–æ–¥–∏—á–∫–µ –æ–º–æ–ª–æ–¥–∏—à—å—Å—è, –∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ–π–¥–µ—à—å - –≤ –º–µ–¥–Ω—É—é —Ç—Ä—É–±—É –ø–æ–ø–∞–¥–µ—à—å.`
    : `üè∞ The hut turned its front to you, and its back to the forest. If you go to the left you will be warmed by the fire, you will go straight ahead in the water and you will rejuvenate, and to the right you will go into a copper pipe.`;

  await ctx.replyWithVideo(videoUrl(lang), {
    caption: text,
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: `üî• ${lang ? "–û–≥–æ–Ω—å" : "Fire"}`,
            callback_data: "fire",
          },
          {
            text: `üíß ${lang ? "–í–æ–¥–∞" : "Water"}`,
            callback_data: "water",
          },
          {
            text: `üé∫ ${lang ? "–ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã" : "Copper pipes"}`,
            callback_data: "copper_pipes",
          },
        ],
      ],
    },
  });

  return;
};

const welcomeMessage = async (ctx: Context) => {
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  const text = lang
    ? `üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ, ${ctx?.update?.message?.from?.first_name}! \n–í—Å–µ–º–æ–≥—É—â–∞—è –ë–∞–±–∞ –Ø–≥–∞, –≤–ª–∞–¥—ã—á–∏—Ü–∞ —Ç–∞–π–Ω –∏ —á–∞—Ä–æ–¥–µ–π–Ω–∏—Ü–∞, –ø—Ä–µ–¥ –≤—Ä–∞—Ç–∞ –Ω–µ–≤–µ–¥–æ–º–æ–≥–æ –º–∏—Ä–∞ —Ç–µ–±—è –ø—Ä–∏–≤–µ—á–∞–µ—Ç.\n–ß—Ç–æ–± –∏–∑–±–∞ –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∫–æ–º –æ–±–µ—Ä–Ω—É–ª–∞—Å—å, –∞ –Ω–µ –∑–∞–¥–æ–º —Å—Ç–æ—è–ª–∞, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ—à–µ–ø—Ç–∞—Ç—å –∫–∞–±—ã —Å–ª–æ–≤–µ—á–∫–æ-–ø—Ä–æ—Ö–æ–¥–Ω–æ–µ.`
    : `üè∞ Welcome, ${ctx?.update?.message?.from?.first_name}! \nThe all-powerful Babya Yaga, the ruler of secrets and charms, is preparing to confront you with the gates of the unknown world.\nTo save you from the front and not the back, remember to speak the word-a-word.`;

  await ctx.replyWithVideo(videoUrl(lang), {
    caption: text,
    reply_markup: {
      force_reply: true,
    },
  });
  return;
};

const intro = async (ctx: Context) => {
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  const intro = lang
    ? `üè∞ –ò–∑–±—É—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–æ–º, –∞ –∫ –ª–µ—Å—É –∑–∞–¥–æ–º. –ù–∞ –ª–µ–≤–æ –ø–æ–π–¥–µ—à—å –æ–≥–Ω–µ–º —Å–æ–≥—Ä–µ–µ—à—å—Å—è, –ø—Ä—è–º–æ –ø–æ–π–¥–µ—à—å –≤ –≤–æ–¥–∏—á–∫–µ –æ–º–æ–ª–æ–¥–∏—à—å—Å—è, –∞ –Ω–∞ –ø—Ä–∞–≤–æ –ø–æ–π–¥–µ—à—å –≤ –º–µ–¥–Ω—É—é —Ç—Ä—É–±—É –ø–æ–ø–∞–¥–µ—à—å.`
    : `üè∞ The hut turned its front to you, and its back to the forest. If you go to the left you will be warmed by the fire, you will go straight ahead in the water and you will rejuvenate, and to the right you will go into a copper pipe.
`;
  return intro;
};

const menuButton = async (ctx: Context) => {
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  const menuButton = [
    [
      {
        text: `üî• ${lang ? "–û–≥–æ–Ω—å" : "Fire"}`,
        callback_data: "fire",
      },
      {
        text: `üíß ${lang ? "–í–æ–¥–∞" : "Water"}`,
        callback_data: "water",
      },
      {
        text: `üé∫ ${lang ? "–ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã" : "Copper pipes"}`,
        callback_data: "copper_pipes",
      },
 
    ],
  ];
  return menuButton;
};

botAiKoshey.command("course", async (ctx) => {
  console.log("course");
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
    try {
      const questionContext = {
        lesson_number: 1,
        subtopic: 1,
      };

      const questions = await getQuestion({
        ctx: questionContext,
        language: "automation",
      });
      if (questions.length > 0) {
        const {
          topic: ruTopic,
          image_lesson_url,
          topic_en: enTopic,
        } = questions[0];

        const user_id = await getUid(ctx.from?.username || "");
        if (!user_id) {
          ctx.reply(lang ? "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." : "You are not registered.");
          return;
        }
        const topic = lang ? ruTopic : enTopic;
        const allAnswers = await getCorrects({
          user_id: user_id.toString(),
          language: "all",
        });
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
            callback_data: `automation_01_01`,
          }],
        ];

        if (image_lesson_url) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.replyWithPhoto(image_lesson_url || "", {
            caption: messageText,
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: inlineKeyboard },
          });
          return;
        } else {
          await ctx.reply(messageText, {
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: inlineKeyboard },
          });
          return;
        }
      } else {
        await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
      }
    } catch (error) {
      console.error(error);
    }
});

botAiKoshey.command("post", async (ctx) => {
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  const chatId = "-1002228291515";
  const message =
    `<b>–ê–π –ö–æ—â–µ–π ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–µ–π—Ä–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n–†–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ <b>Telegram</b>,  –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π <b>TON (The Open Network)</b> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n\n–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è <b>"–ë–æ—Ä—Ç–æ–≤–æ–π –∂—É—Ä–Ω–∞–ª"</b> ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. \n\n–ù–∞—à–µ –≤–∏–¥–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–µ—á–∏, –Ω–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º.`;
  const message_two =
    `üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω–∞—à–∏—Ö —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø–æ –æ–±—É—á–µ–Ω–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, <b>JavaScript, TypeScript, React, Python –∏ Tact! ü§ñüí°</b>\n\nüîç –ù–∞—à–∏ –±–æ—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Ç–æ–∫–µ–Ω –∑–Ω–∞–Ω–∏–π $IGLA, –ø–æ–≥—Ä—É–∂–∞—è—Å—å –≤ –º–∏—Ä –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —É–≥–ª—É–±–ª—è—è—Å—å –≤ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏. üöÄ\n\nüíº –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–∫–µ—Ä–æ–≤, –Ω–∞—à–∏ –±–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π, –æ–±—É—á–∞—è—Å—å –Ω–∞–≤—ã–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å—è—Ç –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞.\n\nüìö –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏, —Å—Ç–∞–Ω–æ–≤—è—Å—å –±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤ —Å—Ñ–µ—Ä–µ IT!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ <b>–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b>!`;
  const telegram_id = ctx.from?.id;
  if (!telegram_id) throw new Error("No telegram id");
  const chatMember = await botAiKoshey.api.getChatMember(chatId, telegram_id);
  const isAdmin = chatMember.status === "administrator" ||
    chatMember.status === "creator";
  if (!isAdmin) {
    await ctx.reply(
      lang
        ? "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
        : "You do not have admin rights to perform this action.",
    );
    return;
  }

  try {
    await botAiKoshey.api.sendVideo(chatId, videoUrl(lang), {
      caption: message,
      parse_mode: "HTML",
    });
    await botAiKoshey.api.sendMessage(chatId, message_two, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [[
          // { text: "Automatization", url: "https://t.me/bot1" },
          { text: "TypeScript", url: "https://t.me/typescript_dev_bot" },
          { text: "Python", url: "https://t.me/python_ai_dev_bot" },
        ], [{ text: "React", url: "https://t.me/react_native_dev_bot" }, {
          text: "JavaScript",
          url: "https://t.me/javascriptcamp_bot",
        } // { text: "Tact", url: "https://t.me/bot6" },
        ], [
          {
            text: "Ai Koshey",
            url: "https://t.me/ai_koshey_bot",
          },
        ]],
      },
    });
    await ctx.reply(
      lang
        ? "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª."
        : "Message with video sent to the channel.",
    );
  } catch (error) {
    console.error("Failed to send message with video to the channel:", error);
    await ctx.reply(
      lang
        ? "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª."
        : "Failed to send message with video to the channel.",
    );
  }
});

const botLinks = async (ctx: Context, isRu: boolean) => {
  await ctx.reply(
    isRu
      ? "–ù–∞—à–∏ –±–æ—Ç—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, JavaScript, TypeScript, React, Python, Tact, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Ç–æ–∫–µ–Ω –∑–Ω–∞–Ω–∏–π $IGLA.\n–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–∫–µ—Ä–æ–≤, –Ω–∞—à–∏ –±–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π, –æ–±—É—á–∞—è—Å—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞"
      : "Our AI training bots, JavaScript, TypeScript, React, Python, Tact, provide a unique opportunity to earn our $IGLA knowledge token for free.\nUnlike other clickers, our bots allow users to spend time profitably learning in-demand skills who can significantly increase your professional value on the labor market",
    {
      reply_markup: {
        inline_keyboard: [[
          // { text: "Automatization", url: "https://t.me/bot1" },
          { text: "TypeScript", url: "https://t.me/typescript_dev_bot" },
          { text: "Python", url: "https://t.me/python_ai_dev_bot" },
        ], [{ text: "React", url: "https://t.me/react_native_dev_bot" }, {
          text: "JavaScript",
          url: "https://t.me/javascriptcamp_bot",
        } // { text: "Tact", url: "https://t.me/bot6" },
        ], [
          {
            text: "Ai Koshey",
            callback_data: "start_test",
          },
        ]],
      },
    },
  );
  return;
};

botAiKoshey.command("bots", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  await botLinks(ctx, lang);
  return;
});

botAiKoshey.command("soul", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  console.log("soul");
  await ctx.reply(lang ? "–ß—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥—É—à–æ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ" : "To fill your avatar's soul, click the button below", {
    reply_markup: {
      inline_keyboard: [[{
        text: lang ? "–°–æ–∑–¥–∞—Ç—å –¥—É—à—É" : "Create soul",
        callback_data: "create_soul",
      }]],
    },
  });
  return;
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start"
botAiKoshey.command("start", async (ctx: AiKosheyContext) => {
  await ctx.replyWithChatAction("typing");
  console.log(ctx.from?.language_code, "ctx.from.language_code")

  const params = ctx?.message?.text && ctx?.message?.text.split(" ")[1];

  const message = ctx.update.message;
  const username = message?.from?.username;
  const telegram_id = message?.from?.id.toString();
  const language_code = message?.from?.language_code;
  if (!ctx.from) throw new Error("User not found");
  console.log(await isRu(ctx), "isRu")
  const lang = await isRu(ctx)

  const chatIdSubscription = lang ? "-1002228291515" : "-1002015840738"
  const isSubscription = await checkSubscription(
    ctx,
    ctx.from?.id,
    chatIdSubscription
  );
  if (!isSubscription) {
    await ctx.reply(lang ? "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üëÅ‚Äçüó®" : "You are not subscribed to the channel. To continue the test, you need to subscribe to the channel üëÅ‚Äçüó®",
      {
        reply_markup: { inline_keyboard: [
          [{ text: lang ? "üëÅ‚Äçüó® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" : "üëÅ‚Äçüó® Subscribe", url: lang ? "https://t.me/ai_koshey999nft" : "https://t.me/ai_koshey_en" }],
        ] }
        }
      );
      return;
    }

  if(!ctx.from.username) {
    await ctx.reply(lang ? "üîç –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å username" : "üîç To use the bot, you must have a username")
    return
  }

  if (params) {
    const underscoreIndex = params.indexOf("_"); // Search for the index of the first '_'

    if (underscoreIndex !== -1) {
      const select_izbushka = params.substring(0, underscoreIndex); // Extract the part before '_'
      const inviter = await getUsernameByTelegramId(params.substring(underscoreIndex + 1), ctx, lang);
      if (!inviter) {
        await ctx.reply(lang ? "–°—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞" : "Invalid link")
        return
      }

      // Check if the selected hut and inviter exist
      if (select_izbushka && inviter) {
        try {
          // Check if the inviter exists
          const { isInviterExist, inviter_user_id, invitation_codes } =
            await checkUsernameCodes(inviter);

          console.log(isInviterExist, "373 isInviterExist")
          if (isInviterExist && invitation_codes) {
            const first_name = message?.from?.first_name;
            const last_name = message?.from?.last_name || "";

            if (username && telegram_id) {
              await ctx.replyWithChatAction("typing");
              // Check if the user exists and create it if it doesn't
              const { isUserExist, user } = await checkAndReturnUser(
                telegram_id,
              );
              console.log(isUserExist, "384 isUserExist")

              if (isUserExist === false || !user?.inviter) {
                console.log(387)
                if (
                  first_name && username &&
                  message?.from?.id && !user?.inviter &&
                    message?.from?.language_code && message?.chat?.id
                  ) {
                    console.log("392")
                    const userObj: CreateUserT = {
                    id: message?.from?.id,
                    username,
                    first_name,
                    last_name,
                    is_bot: message?.from?.is_bot,
                    language_code: message?.from?.language_code,
                    chat_id: message?.chat?.id,
                    inviter: inviter_user_id,
                    invitation_codes,
                    telegram_id: message?.from?.id,
                    select_izbushka,
                  };
                  await ctx.replyWithChatAction("typing");
                  const user = await createUser(userObj);
                  console.log(user, "user 407")
                  console.log("356 sendMenu");
                  await welcomeMenu(ctx);
                  await startIzbushka(ctx);
                  return;
                }
              } else {
                const { isUserExist, user } = await checkAndReturnUser(
                  telegram_id,
                );
                if (isUserExist && user?.inviter) {
                  await ctx.replyWithChatAction("typing");
                  const { izbushka } = await getSelectIzbushkaId(
                    select_izbushka,
                  );

                  if (
                    izbushka && user && first_name &&
                    user.telegram_id && izbushka.workspace_id
                  ) {
                    const passport_user: PassportUser = {
                      user_id: user.user_id,
                      workspace_id: izbushka.workspace_id,
                      room_id: izbushka.room_id,
                      username,
                      first_name,
                      last_name,
                      chat_id: user.telegram_id,
                      type: "room",
                      is_owner: false,
                      photo_url: user.photo_url || null,
                    };

                    const isPassportExist = await checkPassportByRoomId(
                      user.user_id,
                      izbushka.room_id,
                      "room",
                    );

                    if (!isPassportExist) {
                      await setPassport(passport_user);
                    }

                    if (select_izbushka && telegram_id) {
                      await setSelectedIzbushka(
                        telegram_id,
                        select_izbushka,
                      );
                    }

                    await startIzbushka(ctx);
                    return;
                  } else {
                    const textError = `${
                      lang
                        ? "ü§î –û—à–∏–±–∫–∞: getSelectIzbushkaId."
                        : "ü§î Error: getSelectIzbushkaId."
                    }\n${JSON.stringify(izbushka)}`;
                    await ctx.reply(
                      textError,
                    );
                    throw new Error(textError);
                  }
                }
              }
            }
          }
        } catch (error) {
          const textError = `${
            lang
              ? "ü§î –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
              : "ü§î Something went wrong, try again."
          }\n${JSON.stringify(error)}`;
          await ctx.reply(textError);
          await bugCatcherRequest(
            "ai_koshey_bot (select_izbushka && inviter)",
            JSON.stringify(error),
          );
          return;
        }
      } else {
        if (username && telegram_id) {
          // Check if the user exists and send the corresponding message
          const { isUserExist, user } = await checkAndReturnUser(telegram_id);
          console.log(user, "user");
          if (isUserExist && user?.inviter) {
            console.log("440 sendMenu");
            language_code && await welcomeMenu(ctx);
          } else {
            language_code && await welcomeMessage(ctx);
          }
          return;
        } else {
          const textError = `${
            lang
              ? "ü§î –û—à–∏–±–∫–∞: Username not found."
              : "ü§î Error: Username not found."
          }`;
          await ctx.reply(textError);
          throw new Error(textError);
        }
      }
    }
  } else {
    if (username && telegram_id) {
      try {
        const { isUserExist, user } = await checkAndReturnUser(
          telegram_id,
        );

        if (isUserExist && user?.inviter) {
          console.log("465 sendMenu ", user.inviter);
          language_code && await welcomeMenu(ctx);
        } else {
          language_code && await welcomeMessage(ctx);
        }
        return;
      } catch (error) {
        await ctx.reply(
          `${
            lang
              ? "ü§î –û—à–∏–±–∫–∞: checkAndReturnUser."
              : "ü§î Error: checkAndReturnUser."
          }\n${error}`,
        );
        await bugCatcherRequest(
          "ai_koshey_bot (select_izbushka && inviter)",
          JSON.stringify(error),
        );
        throw new Error("Error: checkAndReturnUser.");
      }
    }
  }
});

botAiKoshey.command("buy", async (ctx) => {
  const lang = await isRu(ctx)
  ctx.reply(lang ? "ü§ù –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" : "ü§ù Select the level of subscription you want to purchase", {
    reply_markup: {
      inline_keyboard: [[{ text: lang ? "üî• –û–≥–æ–Ω—å" : "üî• Fire", callback_data: "buy_fire" }], [{ text: lang ? "üåä –í–æ–¥–∞" : "üåä Water", callback_data: "buy_water" }], [{ text: lang ? "üé∫ –ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã" : "üé∫ Copper pipes", callback_data: "buy_copper_pipes" }]],
    },
  })
  return;
});

botAiKoshey.on("pre_checkout_query", (ctx) => {
  ctx.answerPreCheckoutQuery(true)
  return;
});

botAiKoshey.on("message:successful_payment", async (ctx) => {
  const lang = await isRu(ctx)
  console.log("ctx 646(succesful_payment)", ctx)
  const level = ctx.message.successful_payment.invoice_payload
  if (!ctx.from?.username) throw new Error("No username");
  const user_id = await getUid(ctx.from.username)
  if (!user_id) throw new Error("No user_id");
  await sendPaymentInfo(user_id, level)
  ctx.reply(lang ? "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!" : "ü§ù Thank you for the purchase!");
  return;
});

botAiKoshey.command("language", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const { user } = await checkAndReturnUser(ctx.from?.id.toString());
  const lang = await isRu(ctx)
  user && ctx.reply(lang ? "üåè –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫" : "üåè Select language", {
    reply_markup: {
      inline_keyboard: [
        [{ text: lang ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá∑üá∫ Russian", callback_data: "select_russian" }],
        [{ text: lang ? "üá¨üáß English" : "üá¨üáß English", callback_data: "select_english" }],
      ],
    },
  })
});

botAiKoshey.command("digital_avatar", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)

  await ctx.reply(
    lang ? "–°–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞" : "Create digital avatar",
    {
      reply_markup: {
        inline_keyboard: [[{
          text: lang ? "–°–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞" : "Create digital avatar",
          callback_data: "create_digital_avatar",
        }]],
      },
    },
  );
  return;
});

// botAiKoshey.command("text_to_speech", async (ctx) => {
//   await ctx.replyWithChatAction("typing");
//   const isRu = ctx.from?.language_code === "ru";

//   const text = isRu
//     ? "üîÆ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
//     : "üîÆ Please send the text you want to convert to a voice message.";

//   await ctx.reply(text, {
//     reply_markup: {
//       force_reply: true,
//     },
//   });
//   return;
// });

// botAiKoshey.command("reset_voice", async (ctx) => {
//   await ctx.replyWithChatAction("typing");
//   const isRu = ctx.from?.language_code === "ru";
//   const telegram_id = ctx.from?.id.toString();

//   const text = isRu
//     ? "üîÆ –û, –¥–æ–±—Ä—ã–π –º–æ–ª–æ–¥–µ—Ü! –ì–æ–ª–æ—Å —Ç–≤–æ–µ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω, –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π."
//     : "üîÆ Oh, noble traveler! The voice of your digital avatar has been successfully reset, and now you can create a new one.";
//   try {
//     // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
//     if (!telegram_id) throw new Error("No telegram_id");
//     await updateUser(telegram_id, { voice_id_elevenlabs: null });
//     const voice_id_elevenlabs = await getVoiceId(telegram_id);
//     await deleteVoice(voice_id_elevenlabs);
//     await ctx.reply(text);
//   } catch (error) {
//     await ctx.reply(
//       isRu
//         ? "ü§î –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≥–æ–ª–æ—Å–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."
//         : "ü§î Error resetting digital avatar voice.",
//     );
//     await bugCatcherRequest(
//       "ai_koshey_bot (reset_voice)",
//       JSON.stringify(error),
//     );
//     throw new Error("Error resetting digital avatar voice.");
//   }
// });

botAiKoshey.command("voice", async (ctx) => {
  console.log("voice");
  // await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  // const text = lang
  //   ? "üîÆ –û, –¥–æ–±—Ä—ã–π –º–æ–ª–æ–¥–µ—Ü! –ü–æ—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –≥–æ–ª–æ—Å, –∏ —è, –≤–æ–ª—à–µ–±–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π —Ç–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º, —Å–ª–æ–≤–Ω–æ –∏–∑ —Å–∫–∞–∑–∫–∏."
  //   : "üîÆ Please send me a voice message, and I will use it to create a voice avatar that speaks in your own voice.";

  // ctx.reply(text);
  ctx.reply(lang ? "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å water üåä" : "To use this function, you need to purchase the water level üåä")
});

botAiKoshey.command("face", async (ctx) => {
  console.log("face");
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  ctx.reply(lang ? "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å water üåä" : "To use this function, you need to purchase the water level üåä")
})

botAiKoshey.command("brain", async (ctx) => {
  console.log("brain");
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  ctx.reply(lang ? "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å water üåä" : "To use this function, you need to purchase the water level üåä")
})

botAiKoshey.command("top", async (ctx) => {
  console.log("top");
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  const top10Users = await getTop10Users();
  console.log(top10Users, "top10Users");
  const leaderboardText = top10Users.map((user, index) => {
    return `${index + 1}. ${user.username} - ${user.all} $IGLA`;
  }).join('\n');

  await ctx.reply(lang ? `–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n${leaderboardText}` : `Top 10 users:\n${leaderboardText}`);

})

botAiKoshey.on("message:voice", async (ctx) => {
  // const voice = ctx.msg.voice;
  // console.log(voice, "voice");
  // const fileId = voice.file_id;
  // // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  // const file = await ctx.api.getFile(fileId);
  // const filePath = file.file_path;
  // const fileUrl = `https://api.telegram.org/file/bot${AI_KOSHEY}/${filePath}`;

  // console.log(fileUrl, "fileUrl");
  // // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ ElevenLabs –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞
  // const telegram_id = ctx.from?.id.toString();
  // const username = ctx.from?.username;
  // if (!username) throw new Error("No username");

  // const voiceId = await createVoiceSyncLabs({
  //   fileUrl,
  //   username
  // });
  // console.log(voiceId, "voiceId");
  // if (voiceId) {
  //   await ctx.reply(`–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! Voice ID: ${voiceId}`);
  //   await updateUser(telegram_id, { voice_id_synclabs: voiceId });
  // } else {
  //   await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞.");
  // }
});

botAiKoshey.on("message:text", async (ctx: Context) => {
  await ctx.replyWithChatAction("typing");
  const inviter = ctx?.message?.text;
  const message = ctx.update.message;
  const language_code = message?.from?.language_code;
  const username = message?.from?.username;
  const telegram_id = message?.from?.id.toString();

  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)

  // Check if the message is a reply (if there is a reply_to_message)
  if (ctx?.message?.reply_to_message) {
    // Check if the original message text contains a specific text
    const query = ctx.message.text;
    const originalMessageText = ctx?.message?.reply_to_message?.caption
      ? ctx?.message?.reply_to_message?.caption
      : ctx?.message?.reply_to_message?.text;

    if (
      originalMessageText?.includes(
        "üîÆ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
      ) ||
      originalMessageText?.includes(
        "üîÆ Please send the text you want to convert to a voice message.",
      )
    ) {
      // await ctx.replyWithChatAction("record_voice");
      // const telegram_id = ctx.from?.id.toString()
      // const botToken = AI_KOSHEY as string
      // if (!telegram_id) throw new Error("No telegram_id")
      // const voice_id_elevenlabs = await getVoiceId(telegram_id)
      // if (!voice_id_elevenlabs) throw new Error("No voice_id_elevenlabs")
      // if (!query) throw new Error("No query")
      // const audio_url = await createVoiceMessage(query, voice_id_elevenlabs, telegram_id, botToken)
      // console.log(audio_url)
      ctx.reply("test");
      return;
    }
    if (ctx?.message?.reply_to_message) {
      console.log(ctx);
      const originalMessageText = ctx?.message?.reply_to_message?.caption
        ? ctx?.message?.reply_to_message?.caption
        : ctx?.message?.reply_to_message?.text;
      if (
        originalMessageText &&
        originalMessageText.includes(lang ? "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç" : "Send text")
      ) {
        const text = ctx?.message?.text || "";

        if (!text && !message?.from?.id) throw new Error("No text or user_id");
        if (!username) throw new Error("No username");
        if (!telegram_id) throw new Error("No telegram_id");

        const { user } = await checkAndReturnUser(
          telegram_id,
        );

        if (!user) throw new Error("User not found");

        await createVideo({
          avatar_id: user?.avatar_id,
          voice_id: user?.voice_id,
          text,
          user_id: user.user_id,
        });
        await ctx.reply(
          `${
            language_code === "ru"
              ? "–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ –≤–∞–º –ø—Ä–∏–¥–µ—Ç –≤–∏–¥–µ–æ"
              : "Wait, your video is ready"
          }`,
        );
        return;
      }

      if (
        ctx.from && originalMessageText && originalMessageText.includes(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ avatar_id"
            : "Please, specify your avatar_id:",
        )
      ) {
        await updateUser(ctx.from.id.toString(), { avatar_id: query });
        await ctx.reply(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ voice_id:"
            : "Please, specify your voice_id:",
          {
            reply_markup: { force_reply: true },
          },
        );
        return;
      }

      if (
        ctx.from && originalMessageText && originalMessageText.includes(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ voice_id"
            : "Please, specify your voice_id:",
        )
      ) {
        await updateUser(ctx.from.id.toString(), { voice_id: query });
        await ctx.reply(
          lang
            ? "–í–∞—à Digital Avatar —Å–æ–∑–¥–∞–Ω!"
            : "Your Digital Avatar is created!",
        );
        return;
      }

      if (
        ctx.from && originalMessageText && originalMessageText.includes(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ audio_id"
            : "Please, specify your audio_id:",
        )
      ) {
        await updateUser(ctx.from.id.toString(), { audio_id: query });
        await ctx.reply(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ avatar_id:"
            : "Please, specify your avatar_id:",
          {
            reply_markup: { force_reply: true },
          },
        );
        return;
      }

      if (
        ctx.from && originalMessageText && originalMessageText.includes(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:"
            : "Please, specify your company name:",
        )
      ) {
        await updateUser(ctx.from.id.toString(), { company: query });
        await ctx.reply(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
            : "Please, specify your designation:",
          {
            reply_markup: { force_reply: true },
          },
        );
        return;
      }

      if (
        ctx.from && originalMessageText && originalMessageText.includes(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
            : "Please, specify your designation:",
        )
      ) {
        await updateUser(ctx.from.id.toString(), { position: query });
        await ctx.reply(
          lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:"
            : "Please, specify your skills and interests:",
          {
            reply_markup: { force_reply: true },
          },
        );
        return;
      }

      if (
        ctx.from && originalMessageText && originalMessageText.includes(
            lang
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:"
            : "Please, specify your skills and interests:",
        )
      ) {
        await updateUser(ctx.from.id.toString(), { designation: query });
        await ctx.reply(
          lang
            ? "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
            : "Thank you for the provided information!",
        );
        return;
      }
    }

    console.log(originalMessageText, "originalMessageText");
    if (
      originalMessageText || originalMessageText &&
        (originalMessageText.includes("üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å") ||
          originalMessageText.includes("üè∞ Welcome") ||
          originalMessageText.includes("üîí Oh, my apologies!") ||
          originalMessageText.includes("üîí –û—Ö, —É–≤—ã –∏ –∞—Ö!"))
    ) {
      try {
        const { isInviterExist, inviter_user_id } = await checkUsernameCodes(
          inviter as string,
        );

        if (isInviterExist) {
          console.log(message, "message");
          const user = {
            id: message?.from?.id,
            username: message?.from?.username,
            first_name: message?.from?.first_name,
            last_name: message?.from?.last_name,
            is_bot: message?.from?.is_bot,
            language_code,
            chat_id: message?.chat?.id,
            inviter: inviter_user_id,
            invitation_codes: "",
            telegram_id: message?.from?.id,
          };
          console.log(user, "user");
          const newUser = await createUser(user);
          await ctx.replyWithChatAction("typing");

          if (newUser) {
            await ctx.replyWithVideo(videoUrl(lang), {
              caption: await intro(ctx),
              reply_markup: {
                inline_keyboard: await menuButton(ctx),
              },
            });
            await botLinks(ctx, lang);
          }
          return;
        } else {
          await ctx.reply(await textError(ctx), {
            reply_markup: {
              force_reply: true,
            },
          });
          return;
        }
      } catch (error) {
        console.error(error);
      }
    } else {
      console.log("else!!!");
      return;
    }
  } else {
    await ctx.replyWithChatAction("typing");
    const query = ctx?.message?.text;

    const username = ctx?.update?.message?.from?.username;

    if (!username || !language_code) return;

    const id_array = await getPassportsTasksByUsername(username);

    if (query && id_array && id_array.length > 0) {
      const { ai_content, tasks } = await getAiFeedbackFromSupabase({
        query,
        id_array,
        username,
        language_code,
      });

      let tasksMessage = `üìù ${lang ? "–ó–∞–¥–∞—á–∏:\n" : "Tasks:\n"}`;
      tasks.forEach((task) => {
        tasksMessage += `\n${task.title}\n${task.description}\n`;
      });

      await ctx.reply(`${ai_content}\n\n${tasksMessage}`, {
        parse_mode: "Markdown",
      });
      return;
    } else {
      const textError = `${
        lang
          ? "ü§î –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏."
          : "ü§î Error: failed to load tasks."
      }`;
      await ctx.reply(textError);
      return;
    }
  }
});

botAiKoshey.on("callback_query:data", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = await isRu(ctx)
  const callbackData = ctx.callbackQuery.data;

  const telegram_id = ctx.callbackQuery.from.id.toString();
  const username = ctx.update && ctx.update.callback_query.from.username;

  await ctx.replyWithChatAction("typing");
  console.log(ctx);
  const isHaveAnswer = callbackData.split("_").length === 4;

  if (callbackData.startsWith("buy")) {
    if (callbackData.endsWith("fire")) {
      await ctx.replyWithInvoice(
        lang ? "üî• –û–≥–æ–Ω—å" : "üî• Fire",
        "–í—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–û–≥–æ–Ω—å'",
        "fire",
        "", // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
        [{ label: "–¶–µ–Ω–∞", amount: 432 }],
      );
      return
    }
    if (callbackData.endsWith("water")) {
      await ctx.replyWithInvoice(
        lang ? "üåä –í–æ–¥–∞" : "üåä Water",
        "–í—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–í–æ–¥–∞'",
        "water",
        "", // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
        [{ label: "–¶–µ–Ω–∞", amount: 4754 }], // –¶–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö (10.00 Stars)
      );
      return
    }
    if (callbackData.endsWith("copper_pipes")) {
      await ctx.replyWithInvoice(
        lang ? "üé∫ –ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã" : "üé∫ Copper pipes",
        "–í—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã'",
        "copper_pipes",
        "", // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
        [{ label: "–¶–µ–Ω–∞", amount: 47975 }], // –¶–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö (10.00 Stars)
      );
      return
    }
  }
  if (callbackData === "select_russian") {
    if (ctx.callbackQuery.from.id) {
    console.log("editMessageReplyMarkup")
    await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
  }
    await setLanguage(ctx.from?.id.toString(), "ru");
    await ctx.reply("–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π");
  }
  if (callbackData === "select_english") {
    if (ctx.callbackQuery.from.id) {
      console.log("editMessageReplyMarkup")
      await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
    }
    await setLanguage(ctx.from?.id.toString(), "en");
    await ctx.reply("English selected");
  }

  if (
    callbackData.startsWith("start_test") ||
    callbackData.startsWith("automation")
  ) {
    if (callbackData === "start_test") {
      try {
        console.log(`start_test`)
        const questionContext = {
          lesson_number: 1,
          subtopic: 1,
        };

        const questions = await getQuestion({
          ctx: questionContext,
          language: "automation",
        });
        if (questions.length > 0) {
          const {
            topic: ruTopic,
            image_lesson_url,
            topic_en: enTopic,
          } = questions[0];

          const user_id = await getUid(ctx.callbackQuery.from.username || "");
          if (!user_id) {
            await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
          }
          const topic = lang ? ruTopic : enTopic;
          const allAnswers = await getCorrects({
            user_id: user_id.toString(),
            language: "all",
          });
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          const messageText =
            `${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
          const inlineKeyboard = [
            [{
              text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
              callback_data: `automation_01_01`,
            }],
          ];

          if (image_lesson_url) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.replyWithPhoto(image_lesson_url || "", {
              caption: messageText,
              parse_mode: "HTML",
              reply_markup: { inline_keyboard: inlineKeyboard },
            });
            return;
          } else {
            await ctx.reply(messageText, {
              parse_mode: "HTML",
              reply_markup: { inline_keyboard: inlineKeyboard },
            });
            return;
          }
        } else {
          await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
        }
      } catch (error) {
        console.error(error);
      }
    }

    if (!isHaveAnswer) {
      try {
        const [language, lesson, subtopic] = callbackData.split("_");
        let questions;
        if (!isNaN(Number(lesson)) && !isNaN(Number(subtopic))) {
          // –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.
          const getQuestionContext = {
            lesson_number: Number(lesson),
            subtopic: Number(subtopic),
          };
          questions = await getQuestion({
            ctx: getQuestionContext,
            language,
          });
        } else {
          // –û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
          console.error(
            "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(96):",
            lesson,
            subtopic,
            callbackData,
          );
          await ctx.reply(
            lang
              ? "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ."
              : "One of the values is incorrect. Please check the data.",
          );
          return;
        }
        const {
          question: ruQuestion,
          variant_0: ruVariant_0,
          variant_1: ruVariant_1,
          variant_2: ruVariant_2,
          question_en: enQuestion,
          variant_0_en: enVariant_0,
          variant_1_en: enVariant_1,
          variant_2_en: enVariant_2,
          id,
          image_lesson_url,
        } = questions[0];

        const question = lang ? ruQuestion : enQuestion;
        const variant_0 = lang ? ruVariant_0 : enVariant_0;
        const variant_1 = lang ? ruVariant_1 : enVariant_1;
        const variant_2 = lang ? ruVariant_2 : enVariant_2;

        const user_id = await getUid(ctx.callbackQuery.from.username || "");
        if (!user_id) {
          await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }
        console.log(user_id);
        const allAnswers = await getCorrects({
          user_id: user_id.toString(),
          language: "all",
        });
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `<b>‚Ññ${id}</b>\n\n${question}\n\n<b> Total: ${allAnswers} $IGLA</b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: variant_0 || "Variant 1",
            callback_data: `${callbackData}_0`,
          }],
          [{
            text: variant_1 || "Variant 2",
            callback_data: `${callbackData}_1`,
          }],
          [{
            text: variant_2 || (lang ? "–ù–µ –∑–Ω–∞—é" : "I don't know"),
            callback_data: `${callbackData}_2`,
          }],
        ];

        if (image_lesson_url) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.editMessageCaption({
            reply_markup: { inline_keyboard: inlineKeyboard },
            caption: messageText,
            parse_mode: "HTML",
          });
        } else {
          await ctx.editMessageText(messageText, {
            reply_markup: { inline_keyboard: inlineKeyboard },
            parse_mode: "HTML",
          });
        }
      } catch (error) {
        console.error(error);
      }
    }

    if (isHaveAnswer) {
      try {
        if (ctx.callbackQuery.from.id) {
          console.log("editMessageReplyMarkup")
          await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
        }
        const [language, lesson_number, subtopic, answer] = callbackData.split(
          "_",
        );
        const questionContext = {
          lesson_number: Number(lesson_number),
          subtopic: Number(subtopic),
        };

        const questions = await getQuestion({ ctx: questionContext, language });
        if (questions.length > 0) {
          const {
            correct_option_id,
            id
          } = questions[0];
          const user_id = await getUid(ctx.callbackQuery.from.username || "");
          if (!user_id) {
            await ctx.reply(lang ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." : "User not found.");
            return;
          }

          const path = `${language}_${lesson_number}_${subtopic}`;
          console.log(path, "path for getBiggest");
          const biggestSubtopic = await getBiggest({
            lesson_number: Number(lesson_number),
            language,
          });

          let isTrueAnswer = null;
          if (Number(correct_option_id) === Number(answer)) {
            isTrueAnswer = true;
            await ctx.reply("‚úÖ");
          } else {
            isTrueAnswer = false;
            await ctx.reply("‚ùå");
          }
          await updateProgress({
            user_id: user_id.toString(),
            isTrue: isTrueAnswer,
            language,
          });
          console.log(biggestSubtopic, `biggestSubtopic`);
          console.log(subtopic, `subtopic`);
          const newPath = await pathIncrement({
            path,
            isSubtopic: Number(biggestSubtopic) === Number(subtopic)
              ? false
              : true,
          });
          const correctAnswers = await getCorrects({
            user_id: user_id.toString(),
            language,
          });
          const allAnswers = await getCorrects({
            user_id: user_id.toString(),
            language: "all",
          });

          const lastCallbackId = await getLastCallback(language);
          console.log(lastCallbackId);
          if (lastCallbackId) {
            if (questions[0].id === lastCallbackId) {
              const correctProcent = (correctAnswers / lastCallbackId) * 100;
              if (correctProcent >= 80) {
                await updateResult({
                  user_id: user_id.toString(),
                  language,
                  value: true,
                });
                await ctx.reply(
                  lang
                    ? `<b>ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç! –î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Ç –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.</b>\n\n Total: ${allAnswers} $IGLA`
                    : `<b>ü•≥ Congratulations, you passed the main test! Then you can pass the additional tests from the artificial intelligence.</b>\n\n Total: ${allAnswers} $IGLA`,
                  { parse_mode: "HTML" },
                );
              } else {
                await updateResult({
                  user_id: user_id.toString(),
                  language,
                  value: false,
                });
                await ctx.reply(
                  lang
                    ? `<b>ü•≤ –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! </b>\n\n Total: ${allAnswers} $IGLA`
                    : `<b>ü•≤ You didn't pass the main test, but that won't stop you from developing!</b>\n\n Total: ${allAnswers} $IGLA`,
                  { parse_mode: "HTML" },
                );
              }
            }
            console.log(newPath, `newPath ai koshey`);
            const [newLanguage, newLesson, newSubtopic] = newPath.split("_");
            const getQuestionContext = {
              lesson_number: Number(newLesson),
              subtopic: Number(newSubtopic),
            };
            const newQuestions = await getQuestion({
              ctx: getQuestionContext,
              language,
            });
            console.log(newQuestions, `newQuestions ai koshey for`);
            console.log(getQuestionContext, `getQuestionContext`);
            const { topic: ruTopic, image_lesson_url, topic_en: enTopic } =
              newQuestions[0];
            const topic = lang ? ruTopic : enTopic;
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messageText =
              `${topic}\n\n<i><u>${lang ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è." : "Now we are offering you to reinforce the acquired knowledge."}</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            const inlineKeyboard = [
              [{
                text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
                callback_data: newPath,
              }],
            ];
            if (image_lesson_url) {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
              await ctx.replyWithPhoto(image_lesson_url, {
                caption: messageText,
                parse_mode: "HTML",
                reply_markup: { inline_keyboard: inlineKeyboard },
              });
              return;
            } else {
              await ctx.reply(messageText, {
                parse_mode: "HTML",
                reply_markup: { inline_keyboard: inlineKeyboard },
              });
              return;
            }
          } else {
            await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
          }
        } else {
          console.error("Invalid callback(289)");
          return;
        }
      } catch (error) {
        console.error(error);
      }
    }
  }
  if (callbackData.startsWith("create_soul")) {
    if (ctx.callbackQuery.from.id) {
      console.log("editMessageReplyMarkup")
      await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
    }
    await ctx.reply(
      lang
        ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:"
        : "Please, specify your company name:",
      { reply_markup: { force_reply: true } },
    );
    return;
  }

  if (callbackData.startsWith("create_digital_avatar")) {
    if (ctx.callbackQuery.from.id) {
      console.log("editMessageReplyMarkup")
      await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } }); 
    }
    await ctx.reply(
      lang
        ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ video_id:"
        : "Please, specify your video_id:",
      { reply_markup: { force_reply: true } },
    );
    return;
  }

  const handleRoomSelection = async (
    ctx: Context,
    rooms: RoomNode[],
    type: string,
  ) => {
    try {
      if (rooms && rooms.length > 0) {
        const keyboard = rooms
          .filter((room: RoomNode) => room)
          .map((room: RoomNode) => ({
            text: room.name,
            callback_data: `select_izbushka_${room.id}`,
          }))
          .reduce(
            (
              acc: { text: string; callback_data: string }[][],
              curr: { text: string; callback_data: string },
              index: number,
            ) => {
              const row = Math.floor(index / 1);
              acc[row] = acc[row] || [];
              acc[row].push(curr);
              return acc;
            },
            [],
          );

        await ctx.replyWithChatAction("typing");
        if (type === "fire") {
          const textFire = `üî• ${
            lang
              ? "–ü–ª–∞–º—è –≥–æ—Ä—è—á–µ–µ - —ç—Ç–æ –ª–∏—á–Ω—ã–µ –∏–∑–±—É—à–∫–∏, –≥–¥–µ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –ø–∏—à—É—Ç—Å—è –∏ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è."
              : "Fire is a private room where your words are written and tasks are created."
          }`;
          await ctx.reply(
            textFire,
            {
              reply_markup: { inline_keyboard: keyboard },
            },
          );
          return;
        } else if (type === "water") {
          const textWater = `üíß ${
            lang
              ? "–í–æ–¥—ã —á–∏—Å—Ç—ã–µ –∫ —Å–µ–±–µ –º–∞–Ω—è—Ç, –≥–¥–µ –≥–æ—Å—Ç—å —Ç—ã –≤ –∏–∑–±—É—à–∫–∞—Ö –¥–æ—Ä–æ–≥–æ–π."
              : "Water is pure to you, where guests are in the private rooms."
          }`;
          await ctx.reply(
            textWater,
            {
              reply_markup: { inline_keyboard: keyboard },
            },
          );
          return;
        } else if (type === "copper_pipes") {
          const textCopperPipes = `üé∫ ${
            lang
              ? "–ú–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã - —ç—Ç–æ —á–∞—Ä–æ–¥–µ–π—Å–∫–∏–µ –∏–∑–±—É—à–∫–∏, –≥–¥–µ –æ–±—É—á–µ–Ω–∏–µ –∫ –º—É–¥—Ä–æ—Å—Ç–∏ —Ç–µ–±—è –≤–µ–¥–µ—Ç."
              : "Copper pipes are the sacred huts where the training to wisdom guides you."
          }`;
          await ctx.reply(
            textCopperPipes,
            {
              reply_markup: { inline_keyboard: keyboard },
            },
          );
          return;
        }
        return;
      } else {
        const textError = `${
          lang
            ? "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—É—à–µ–∫ –∫—É–¥–∞ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏"
            : "You don't have any rooms where you were invited"
        }`;
        await ctx.reply(textError);
        return;
      }
    } catch (error) {
      const textError = `${
        lang ? "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–±—É—à–∫–∏" : "Error selecting the room"
      }`;
      await ctx.reply(textError, error);
      throw new Error(textError);
    }
  };

  if (callbackData === "fire") {
    const rooms = username && (await getRooms(username));
    rooms && await handleRoomSelection(ctx, rooms, "fire");
  } else if (callbackData === "water") {
    const rooms = username && (await getRoomsWater(username));
    rooms && await handleRoomSelection(ctx, rooms, "water");
  } else if (callbackData === "copper_pipes") {
    const rooms = await getRoomsCopperPipes();
    rooms && await handleRoomSelection(ctx, rooms, "copper_pipes");
  }

  if (callbackData === "name_izbushka") {
    try {
      const textQuestion = `${
        lang ? "–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –∏–∑–±—É—à–∫—É?" : "How do we name the room?"
      }`;
      await ctx.reply(textQuestion, {
        reply_markup: {
          force_reply: true,
        },
      });
      return;
    } catch (error) {
      console.error(error);
      await bugCatcherRequest("ai_koshey_bot (name_izbushka)", error);
      throw new Error("ai_koshey_bot (name_izbushka)");
    }
  }

  if (callbackData === "show_izbushka") {
    const rooms = username && (await getRooms(username));
    // console.log(rooms, "rooms");
    try {
      if (Array.isArray(rooms)) {
        const textSelectRoom = `${lang ? "üè° –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–±—É—à–∫—É" : "Select the room"}`;
        await ctx.reply(textSelectRoom, {
          reply_markup: {
            inline_keyboard: rooms
              .filter((room: RoomNode) => room)
              .map((room: RoomNode) => ({
                text: room.name,
                callback_data: `select_izbushka_${room.id}`,
              }))
              .reduce(
                (
                  acc: { text: string; callback_data: string }[][],
                  curr,
                  index,
                ) => {
                  const row = Math.floor(index / 1);
                  acc[row] = acc[row] || [];
                  acc[row].push(curr);
                  return acc;
                },
                [],
              ),
          },
        });
      } else {
        const textError = `${
          lang ? "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—É—à–∫–∏." : "Error: failed to load room."
        }`;
        await ctx.reply(textError);
        await bugCatcherRequest("ai_koshey_bot (show_izbushka)", ctx);
        throw new Error("ai_koshey_bot (show_izbushka)");
      }
      return;
    } catch (error) {
      console.error("error show_izbushka", error);
      await bugCatcherRequest("ai_koshey_bot (show_izbushka)", ctx);
      throw new Error("ai_koshey_bot (show_izbushka)");
    }
  }

  if (callbackData.includes("select_izbushka")) {
    try {
      const select_izbushka = callbackData.split("_")[2];

      if (select_izbushka) {
        telegram_id && await setSelectedIzbushka(telegram_id, select_izbushka);
      }
      const textForInvite = `${
        lang
          ? 'üì∫ –ß—Ç–æ –∂, –ø—É—Ç–Ω–∏–∫ –¥–æ—Ä–æ–≥–æ–π, –¥–∞–±—ã —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "Izbushka" —Å–º–µ–ª–µ–µ –∏ –≤–µ—Å–µ–ª–∏—Å—å, –∏–±–æ –≤—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –Ω–∞—á–∞–ª—É —Ç–≤–æ–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ —Ü–∏—Ñ—Ä–æ–≤—ã–º –ø—Ä–æ—Å—Ç–æ—Ä–∞–º!\n\nüåü –ü–æ–¥–µ–ª–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–æ–π —Å —Ç–µ–º, —Å –∫–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤ –ò–∑–±—É—à–∫–µ –Ω–∞ –∫—É—Ä—å–∏—Ö –Ω–æ–∂–∫–∞—Ö —Ö–æ—á–µ—à—å.'
          : 'What, traveler, to start the broadcast, press the "Izbushka" button more joyfully and laugh, because all is prepared for the start of your journey through the digital spaces! \n\nüåü Share the following link with the person you want to meet in the hut on the curved tips of the hut.'
      }`;
      await ctx.reply(
        textForInvite,
      );
      await delay(500);

      const textInvite = `${
        lang
          ? `üè∞ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ** üè∞\n[–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!](https://t.me/${botUsername}?start=${select_izbushka}_${telegram_id})\n\n–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **Izbushka**, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤—Å—Ç—Ä–µ—á—É.\n[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è](https://youtube.com/shorts/YKG-1fdEtAs?si=ojKvK2DfPsZ0mbd5)`
          : `Invitation to the DAO 999 NFT\n[Press the link to join!](https://t.me/${botUsername}?start=${select_izbushka}_${telegram_id})\n\nAfter connecting to the bot, press the **Izbushka** button to enter the video meeting.\n[Instruction for connecting](https://youtube.com/shorts/YKG-1fdEtAs?si=ojKvK2DfPsZ0mbd5)`
      }`;

      await ctx.reply(textInvite, { parse_mode: "Markdown" });

      return;
    } catch (error) {
      await bugCatcherRequest("ai_koshey_bot (select_izbushka)", error);
      throw new Error("ai_koshey_bot (select_izbushka)");
    }
  }
});

await botAiKoshey.api.setMyCommands([
  {
    command: "/start",
    description: "üöÄ Start chatting with Ai Koshey",
  },
  // {
  //   command: "/avatar",
  //   description: "Create a digital avatar",
  // },
  {
    command: "/course",
    description: "üìö Start the course",
  },
  {
    command: "/language",
    description: "üåê Select language",
  },
  {
    command: "/soul",
    description: "üÜî Fill your avatar's soul",
  },
  {
    command: "/face",
    description: "ü§ì Add avatar's face",
  },
  {
    command: "/brain",
    description: "üß† Add avatar's brain",
  },
  // {
  //   command: "/text_to_speech",
  //   description: "Convert text to speech",
  // },
  {
    command: "/voice",
    description: "üé§ Add avatar's voice",
  },
  {
    command: "/top",
    description: "üèÜ Top 10 users",
  },
  // {
  //   command: "/buy",
  //   description: "üõí Buy subscription",
  // },
  // {
  //   command: "/reset_voice",
  //   description: "Reset voice ai-avatar",
  // },
]);

botAiKoshey.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
    throw e;
  } else {
    console.error("Unknown error:", e);
    throw e;
  }
});

Deno.serve(async (req) => {
  try {
    const url = new URL(req.url);
    if (url.searchParams.get("secret") !== Deno.env.get("FUNCTION_SECRET")) {
      return new Response("not allowed", { status: 405 });
    }

    return await handleUpdateAiKoshey(req);
  } catch (err) {
    console.error(err);
  }
});

// const textInvite = `${
//   isRu
//     ? `üè∞ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ** üè∞\n\n[–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!](https://t.me/${botUsername}?start=${select_izbushka}_${username})\n\n–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **Izbushka**, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤—Å—Ç—Ä–µ—á—É.`
//     : `Invitation to the **DAO 999 NFT**\n\nPress the link to join!](https://t.me/${botUsername}?start=${select_izbushka}_${username})\n\nAfter connecting to the bot, press the **Izbushka** button to enter the video meeting.`
// }`;
// const buttons = [
//   {
//     text: `${
//       isRu
//         ? "–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
//         : "Video instruction for connecting"
//     }`,
//     web_app: {
//       url: `https://youtube.com/shorts/YKG-1fdEtAs?si=ojKvK2DfPsZ0mbd5`,
//     },
//   },
// ];

// supabase functions deploy ai-koshey --no-verify-jwt
